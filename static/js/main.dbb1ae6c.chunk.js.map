{"version":3,"sources":["serviceWorker.ts","util/nodes.ts","RudolfReducer.ts","styles/App_styles.ts","styles/feedback_styles.ts","util/carnapAdapter.ts","components/PremiseInput.tsx","components/RudolfFeedback.tsx","components/NodeMenu.tsx","styles/NodeView_styles.ts","components/StyledAutosizeInput.tsx","components/FormulaView.tsx","components/CustomTooltip.tsx","components/NodeView.tsx","components/TruthTree.tsx","util/helpers.ts","components/Rudolf.tsx","undoableReducer.ts","index.tsx","lib.ts"],"names":["Boolean","window","location","hostname","match","makeNode","formulas","forest","nodeType","id","destructivelyAppendChildren","root","createNodes","length","forEach","child","console","warn","parsePremises","map","form","idx","makeTreeForm","value","row","resolved","isOpenLeaf","node","firstRow","makeEmptyFormulas","n","nextRow","arr","push","getNode","nodePath","split","char","Number","Error","convertIdToPath","currentNode","isFormulaNode","RudolfReducer","nodeId","formulaIndex","newValue","this","draftState","tree","nodeRow","justification","Object","assign","justifications","contradictoryRows","feedback","index","draftNode","premiseArray","formulaCount","rule","parentRow","parentId","ImmerReducer","rudolfReducer","createReducerFunction","createActionCreators","continueBranch","createTree","markContradiction","markFinished","reopenBranch","splitBranch","toggleResolved","updateContradiction","updateFeedback","updateFormula","updateJustification","appJSS","createUseStyles","AppBounder","color","fontSize","display","flexDirection","alignItems","margin","TopItemsBounder","TreeBounder","borderStyle","borderWidth","borderRadius","height","width","backgroundColor","maxWidth","overflowX","feedbackJSS","Correct","borderColor","Incorrect","convertToSequent","newFormulas","previousFormulas","concat","label","convertFormulas","validRow","rearrangeFormulas","filter","row1","row2","every","includes","sort","a","b","form1","form2","contradictionSequent","processFeedback","sequentRoot","feedbackRoot","feedbackMap","rec","sequent","feedbackNode","parentFeedback","extractMessage","childSequent","class","info","checkSequent","checker","Promise","resolve","reject","result","error","checkTree","success","forms","mainFormulaRow","findIndex","mainFormula","formulasWithoutMain","slice","newList","join","maybeRow","translateFeedback","feedbackMessages","toLocaleUpperCase","PremiseInput","onSubmit","premises","setPremises","event","preventDefault","type","name","aria-label","onChange","target","className","RudolfFeedback","currentState","href","encodeURIComponent","JSON","stringify","style","alignSelf","Feedback","NodeMenu","open","dispatch","anchorEl","close","onClose","formula","Menu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","zIndex","MenuItem","onClick","nodeviewJSS","TruthTree","padding","gridTemplateColumns","placeItems","columnGap","rowGap","RowNumber","gridColumn","Justification","NodeViewContainer","NodeView","textAlign","FormulaBounder","Tooltip","StyledAutosizeInput","placeholder","inputStyle","FormulaView","useState","contextMenu","setContextMenu","ref","useRef","gridRow","onContextMenu","e","currentTarget","current","Check","CustomTooltip","withStyles","tooltip","props","classes","feedbackClasses","feedbackInfo","feedbackClass","gridTemplateRows","title","relations","targetId","targetAnchor","sourceAnchor","key","rows","range","start","stop","errorMessage","undefined","keys","rowString","marginRight","Rudolf","innerReducer","initialPremises","useReducer","action","past","present","future","previous","next","distantFuture","initialState","pastStates","futureStates","useEffect","Carnap","then","catch","message","topItemsRef","rawInput","IconButton","disabled","Undo","Redo","arrowLength","svgContainerStyle","strokeColor","noCurves","trees","elementId","checkIchikawaJenkinsSLTableau","ReactDOM","render","React","createElement","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,qJCNtBC,EAAW,SAAC,GAML,IAAD,IALjBC,gBAKiB,MALN,GAKM,MAJjBC,OAKA,MAAO,CACLC,SAAU,WACVF,WACAC,YAJe,MAJR,GAIQ,EAKfE,GALe,EAHjBA,KA8BWC,EAA8B,SAA9BA,EACXC,EACAC,GAEsB,kBAAlBD,EAAKH,WAEoB,aAAlBG,EAAKH,SAIkB,IAAvBG,EAAKJ,OAAOM,OACrBF,EAAKJ,OAASK,EAAYD,EAAKF,IAE/BE,EAAKJ,OAAOO,SAAQ,SAACC,GAAD,OAClBL,EAA4BK,EAAOH,MANrCI,QAAQC,KAAK,gDAeJC,EAAgB,SAACZ,GAC5B,OAAOD,EAAS,CACdC,SAAUA,EAASa,KAAI,SAACC,EAAMC,GAAP,OAAeC,EAAaF,EAAMC,EAAM,MAC/Dd,OAAQ,GACRE,GAAI,MAIFa,EAAe,eAACC,EAAD,uDAAS,GAAIC,EAAb,6CAAwC,CAC3DD,QACAE,UAAU,EACVD,QAGWE,EAAa,SAACC,GAAD,OAChB,MAARA,GAAkC,aAAlBA,EAAKnB,UAAkD,IAAvBmB,EAAKpB,OAAOM,QAKjDe,EAAW,SAACD,GAAD,OAAuBA,EAAKrB,SAAS,GAAGkB,KAEnDK,EAAoB,SAACC,EAAWC,GAE3C,IADA,IAAMC,EAAM,GACLF,KAAM,GACXE,EAAIC,KAAKX,EAAa,GAAIS,MAE5B,OAAOC,GAYIE,EAAU,SAACvB,EAAmBF,GACzC,IADkE,EAC5D0B,EAVuB,SAAC1B,GAAD,OAC7BA,EAAG2B,MAAM,IAAIjB,KAAI,SAACkB,GAChB,GAAa,MAATA,GAAyB,MAATA,EAClB,OAAOC,OAAOD,GAEd,MAAM,IAAIE,MAAJ,wCAA2CF,EAA3C,eAAsD5B,OAKpC+B,CAAgB/B,GACxCgC,EAAwB9B,EAFsC,cAGhDwB,GAHgD,IAGlE,2BAA4B,CAAC,IAAlBd,EAAiB,QAC1B,GAA6B,aAAzBoB,EAAYjC,SACd,MAAM,IAAI+B,MAAM,2BAElBE,EAAcA,EAAYlC,OAAOc,IAP+B,8BASlE,OAAOoB,GAUIC,EAAgB,SAACf,GAAD,MACT,aAAlBA,EAAKnB,UC9FMmC,EAAb,4KACgBC,EAAgBC,EAAsBC,GAChCZ,EAAQa,KAAKC,WAAWC,KAAML,GACtCtC,SAASuC,GAActB,MAAQuB,IAH7C,0CAMsBI,EAAiBC,GACnCC,OAAOC,OAAON,KAAKC,WAAWM,eAAeJ,GAAUC,KAP3D,0CAUsB1C,EAAY8C,GAC9BH,OAAOC,OAAOnB,EAAQa,KAAKC,WAAWC,KAAMxC,GAAK,CAAE8C,wBAXvD,qCAciBC,GACbT,KAAKC,WAAWQ,SAAWA,IAf/B,qCAkBiBZ,EAAgBa,GAC7B,IAAMC,EAAYxB,EAAQa,KAAKC,WAAWC,KAAML,GAChDc,EAAUpD,SAASmD,GAAOhC,UAAYiC,EAAUpD,SAASmD,GAAOhC,WApBpE,iCAuBakC,GACTZ,KAAKC,WAAWC,KAAO/B,EAAcyC,GACrCZ,KAAKC,WAAWjB,QAAU4B,EAAa9C,OAAS,EAChDkC,KAAKC,WAAWM,eAAiB,KA1BrC,qCA6BiBV,EAAgBgB,GAAuB,IAAD,OAC7CF,EAAYxB,EAAQa,KAAKC,WAAWC,KAAML,GAChDlC,EAA4BgD,GAAW,SAACjD,GAAD,MAAQ,CAC7CJ,EAAS,CACPI,GAAG,GAAD,OAAKA,EAAL,KACFH,SAAUuB,EAAkB+B,EAAc,EAAKZ,WAAWjB,eAI9DgB,KAAKC,WAAWM,eAAeP,KAAKC,WAAWjB,SAAW,CACxD8B,KAAM,GACNC,UAAW,IAEbf,KAAKC,WAAWjB,SAAW6B,IA1C/B,kCA6CchB,EAAgBgB,GAAuB,IAAD,OAC1CF,EAAYxB,EAAQa,KAAKC,WAAWC,KAAML,GAChDlC,EAA4BgD,GAAW,SAACjD,GACtC,IAAMH,EAAWuB,EAAkB+B,EAAc,EAAKZ,WAAWjB,SACjE,MAAO,CACL1B,EAAS,CACPI,GAAG,GAAD,OAAKA,EAAL,KACFH,aAEFD,EAAS,CACPI,GAAG,GAAD,OAAKA,EAAL,KACFH,iBAINyC,KAAKC,WAAWM,eAAeP,KAAKC,WAAWjB,SAAW,CACxD8B,KAAM,GACNC,UAAW,IAEbf,KAAKC,WAAWjB,SAAW6B,IAhE/B,wCAmEoBhB,GAChB,ID1EkCmB,EC0E5BL,EAAYxB,EAAQa,KAAKC,WAAWC,KAAML,GAChDc,EAAUnD,OAAS,ED3EewD,EC2EQL,EAAUjD,GD3EuB,CAC7ED,SAAU,gBACVF,SAAU,GACViD,kBAAmB,GACnB9C,GAAG,GAAD,OAAKsD,EAAL,UCEJ,mCAwEenB,GACX,IDxE6BmB,ECwEX7B,EAAQa,KAAKC,WAAWC,KAAML,GACtCrC,OAAS,EDzEUwD,ECyEQnB,EDzE4B,CACnEpC,SAAU,WACVF,SAAU,GACVG,GAAG,GAAD,OAAKsD,EAAL,UCJJ,mCA6EenB,GACOV,EAAQa,KAAKC,WAAWC,KAAML,GACtCrC,OAAS,OA/EvB,GAAmCyD,gBA6FtBC,EAA4DC,gCACvEvB,G,EAeEwB,+BAAqBxB,GAXvByB,E,EAAAA,eACAC,E,EAAAA,WACAC,E,EAAAA,kBACAC,E,EAAAA,aACAC,E,EAAAA,aACAC,E,EAAAA,YACAC,E,EAAAA,eACAC,E,EAAAA,oBACAC,E,EAAAA,eACAC,E,EAAAA,cACAC,E,EAAAA,oB,QC1GaC,EAhCAC,YAAgB,CAC7BC,WAAY,CACVC,MAAO,QACPC,SAAU,sBACVC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,OAAQ,OAGVC,gBAAiB,CACfJ,QAAS,OACTC,cAAe,SACfC,WAAY,UAGdG,YAAa,CACXC,YAAa,QACbC,YAAa,OACbC,aAAc,OACd,uBAAwB,CACtBC,OAAQ,MACRC,MAAO,OAET,6BAA8B,CAC5BC,gBAAiB,SAEnBC,SAAU,OACVC,UAAW,YClBAC,EAVKlB,YAAgB,CAClCmB,QAAS,CACPC,YAAa,SAGfC,UAAW,CACTD,YAAa,S,iDCGJE,EAAmB,SAAnBA,EAAoB,EAE/BhD,GAEiB,IAHLiD,EAGI,EAHdjG,SAAuBC,EAGT,EAHSA,OAAQE,EAGjB,EAHiBA,GAEjC+F,EACgB,uDADe,GAEzBlG,EAAWkG,EAAiBC,OAAOF,GACzC,GAAsB,IAAlBhG,EAAOM,OACT,MAAO,CAAE6F,MAAOC,GAAgBrG,GAAWuD,KAAM,GAAItD,OAAQ,GAAIE,MAC3D,IAAD,cACWF,EADX,GACEQ,EADF,KAEL,GAAuB,aAAnBA,EAAMP,SAAyB,CACjC,IAAM2C,EAAgBG,EAAe1B,EAASb,IACtC8C,EAASV,EAATU,KACFC,EAAYxB,OAAOa,EAAcW,WACvC,IAAK8C,GAAS9C,GACZ,MAAM,IAAIvB,MAAJ,qDAC0CuB,EAD1C,MAIR,GAAIA,GAAalC,EAASb,GACxB,MAAM,IAAIwB,MAAJ,qBACUuB,EADV,4CACuDlC,EACzDb,GAFE,OAMR,MAAO,CACL2F,MAAOC,GAAgBrG,GACvBuD,KAAM,KACNtD,OAAQ,CACN,CACEmG,MAAOG,GAAkBvG,EAAUwD,GACnCD,OACApD,KACAF,OAAQA,EAAOY,KAAI,SAACQ,GAAD,OACjB2E,EACE3E,EACA2B,EACAhD,EAASwG,QAAO,SAAC1F,GAAD,QAAYA,EAAKI,MAAQsC,aAM9C,GAAuB,kBAAnB/C,EAAMP,SAA8B,OAExBO,EAAMwC,kBAAkBnB,MAAM,KAAKjB,IAAImB,QAFf,mBAEtCyE,EAFsC,KAEhCC,EAFgC,KAG7C,IAAK,CAACD,EAAMC,GAAMC,MAAML,IACtB,MAAM,IAAIrE,MAAJ,qEAC0DxB,EAAMwC,kBADhE,MAJqC,MAQtBjD,EACpBwG,QAAO,SAAC1F,GAAD,MAAU,CAAC2F,EAAMC,GAAME,SAAS9F,EAAKI,QAE5C2F,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE9F,MAAMV,OAASuG,EAAE7F,MAAMV,UAXE,mBAQtCyG,EARsC,KAQ/BC,EAR+B,KAY7C,IAAMD,IAASC,EACb,MAAM,IAAIhF,MAAM,wCAElB,IAAMiF,EAA+Bb,GAAgB,GAAD,mBAC/CrG,EAASwG,QAAO,SAAC1F,GAAD,OAAW,CAAC2F,EAAMC,GAAME,SAAS9F,EAAKI,SADP,CAElD8F,EACAC,KAEF,MAAO,CACLb,MAAOC,GAAgBrG,GACvBuD,KAAM,KACNpD,KACAF,OAAQ,CACN,CACEmG,MAAOc,EACP3D,KAAM,KACNpD,GAAIM,EAAMN,GACVF,OAAQ,CAAC,CAAEmG,MAAO,GAAI7C,KAAM,GAAItD,OAAQ,QAIzC,GAAuB,aAAnBQ,EAAMP,SACf,MAAO,CACLkG,MAAOC,GAAgBrG,GACvBuD,KAAM,KACNpD,KACAF,OAAQ,CACN,CACEmG,MAAOC,GAAgBrG,GACvBuD,KAAM,MACNpD,GAAIM,EAAMN,GACVF,OAAQ,CACN,CACEmG,MAAO,GACP7C,KAAM,GACNtD,OAAQ,QAOlB,MAAM,IAAIgC,MAAM,uCAKTkF,EAAkB,SAC7BC,EACAC,GAEA,IAAMC,EAA2B,GACjC,GAAIF,EAAYnH,OAAOM,OAAQ,EAEjB,SAANgH,EACJC,EACAC,EACAC,GAGA,GAA0B,kBAAfF,EAAQrH,GAAiB,CAClC,GAAqB,OAAjBqH,EAAQjE,MAAkC,QAAjBiE,EAAQjE,KAEnC,YADA+D,EAAYE,EAAQrH,IAAMwH,GAAeF,IAGzCH,EAAYE,EAAQrH,IAAMuH,EAC1BF,EAAQvH,OAAOO,SAAQ,SAACoH,EAAc7G,GACpCwG,EACEK,EACAH,EAAaxH,OAAOc,GACpB4G,GAAeF,YAKrBD,EAAQvH,OAAOO,SAAQ,SAACoH,EAAc7G,GACpCwG,EAAIK,EAAcH,EAAaxH,OAAOc,GAAM2G,MAKlDH,CAAIH,EAAaC,EAAc,CAC7BQ,MAAO,UACPC,KAAM,gBAGV,OAAOR,GAIHS,EAAY,uCAAG,WACnBP,EACAQ,GAFmB,SAAAlB,EAAA,+EAIZ,IAAImB,SAAQ,SAACC,EAASC,GAC3B,IACEH,EAAQR,GAAS,SAACY,GAChBF,EAAQE,MAEV,MAAOC,GACPF,EAAOE,QAVQ,2CAAH,wDAeLC,GAAS,uCAAG,WACvB3F,EACAK,EACAgF,GAHuB,iBAAAlB,EAAA,6DAKjBU,EAAUxB,EAAiBrD,EAAMK,GALhB,SAMc+E,EAAaP,EAASQ,GANpC,cAMjB9E,EANiB,yBAOhB,CACLqF,SAAS,EACTrF,SAAUiE,EAAgBK,EAAStE,KATd,2CAAH,0DAahBqD,GAAoB,SACxBiC,EACAC,GAEA,IAAM1H,EAAMyH,EAAME,WAAU,SAAC5H,GAAD,OAAUA,EAAKI,MAAQuH,KAC7CE,EAAcH,EAAMzH,GACpB6H,EAAsBJ,EAAMK,MAAM,EAAG9H,GAAKoF,OAAOqC,EAAMK,MAAM9H,EAAM,IACnE+H,EAAO,sBAAOF,GAAP,CAA4BD,IACzC,OAAOtC,GAAgByC,IAGnBzC,GAAkB,SAACmC,GAAD,OACtBA,EACG3H,KAAI,qBAAGI,SACP8H,KAAK,KACL5C,OAAO,SAENG,GAAW,SAAC0C,GAAD,OAA+BA,EAAW,GAGrDrB,GAAiB,SAAC,GAAD,EACrB1H,OADqB,IAElBiD,EAFkB,iCAGc+F,GAAkB/F,IAEjDgG,GAAkD,CACtD,2BAA4B,4BAC5B,mCAAoC,qCAGhCD,GAAoB,SAAC/F,GAAD,yBAAC,eACtBA,GADqB,IAExB4E,KAAI,UAAEoB,GAAiBhG,EAAS4E,KAAKqB,4BAAjC,QAAyDjG,EAAS4E,Q,oBC3LzDsB,GArBuB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAK3D,OACE,0BAAMF,SALgD,SAACG,GACvDA,EAAMC,iBACNJ,EAASC,KAIP,kBAAC,KAAD,CACEI,KAAK,OACLC,KAAK,WACLC,aAAW,iBACX3I,MAAOqI,EACPO,SAAU,SAACL,GAAD,OAAWD,EAAYC,EAAMM,OAAO7I,UAEhD,4BAAQ8I,UAAU,kBAAkBL,KAAK,UAAzC,sB,UCASM,GAhByB,SAACC,GAAD,OACtC,uBACEC,KAAI,kDAA6CC,mBAAmB,oBAAhE,iBAEMA,mBAAmB,oDAAD,OAC0BC,KAAKC,UACvDJ,MAGJK,MAAO,CAAEC,UAAW,aARtB,WAWE,kBAACC,GAAA,EAAD,Q,8BCkBSC,GAAsB,SAAC,GAO7B,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,SACAxH,EAII,EAJJA,MACAyH,EAGI,EAHJA,SACSC,EAEL,EAFJC,QACAzJ,EACI,EADJA,KAEM0J,EAAU1J,EAAKrB,SAASmD,GAC9B,OACE,kBAAC6H,GAAA,EAAD,CACEN,KAAMA,EACNO,mBAAoB,KACpBL,SAAUA,EACVE,QAASD,EACTK,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,UAEdd,MAAO,CAAEgB,OAAQ,MAEjB,kBAACC,GAAA,EAAD,CACEC,QAAS,WACPb,EAAS7G,EAAezC,EAAKlB,GAAI,IACjC0K,MAHJ,gCAQA,kBAACU,GAAA,EAAD,CACEC,QAAS,WACPb,EAASxG,EAAY9C,EAAKlB,GAAI,IAC9B0K,MAHJ,6BAQA,kBAACU,GAAA,EAAD,CACEC,QAAS,WACPb,EAAS7G,EAAezC,EAAKlB,GAAI,IACjC0K,MAHJ,iCAQA,kBAACU,GAAA,EAAD,CACEC,QAAS,WACPb,EAASxG,EAAY9C,EAAKlB,GAAI,IAC9B0K,MAHJ,8BAQA,kBAACU,GAAA,EAAD,CACEC,QAAS,WACPb,EAASvG,EAAe/C,EAAKlB,GAAIgD,IACjC0H,MAHJ,WAMWE,EAAQ5J,SAAW,KAAO,GANrC,YAQCC,EAAWC,IACV,kBAACkK,GAAA,EAAD,CACEC,QAAS,WACPb,EAAS3G,EAAkB3C,EAAKlB,KAChC0K,MAHJ,mCASDzJ,EAAWC,IACV,kBAACkK,GAAA,EAAD,CACEC,QAAS,WACPb,EAAS1G,EAAa5C,EAAKlB,KAC3B0K,MAHJ,wBASiB,kBAAlBxJ,EAAKnB,UACJ,kBAACqL,GAAA,EAAD,CACEC,QAAS,WACPb,EAASzG,EAAa7C,EAAKlB,KAC3B0K,MAHJ,mBCvEOY,GA9CK/G,YAAgB,CAClCgH,UAAW,CACT5G,QAAS,OACT6G,QAAS,QACTC,oBACE,wDACFC,WAAY,SACZC,UATc,OAUdC,OAXkB,SAcpBC,UAAW,CACTC,WAAY,aAGdC,cAAe,CACbD,WAAY,gBACZnH,QAAS,OACTyF,UAAW,SAGb4B,kBAAmB,CACjBF,WAAY,YAGdG,SAAU,CACRtH,QAAS,OACTuH,UAAW,SACXP,UA9Bc,OA+BdC,OAhCkB,SAmCpBO,eAAgB,CACdxH,QAAS,OACTQ,aAAc,OACdD,YAAa,OACbD,YAAa,QACbU,YAAa,cACbiG,OAzCkB,SA4CpBQ,QAAS,CACP1H,SAAU,SCrBC2H,OAhBf,YAA8E,IAA/C3C,EAA8C,EAA9CA,SAAU5I,EAAoC,EAApCA,MAAOwL,EAA6B,EAA7BA,YAAanC,EAAgB,EAAhBA,MAC3D,OACE,kBAAC,KAAD,CACEA,MAAOA,EACPoC,WAAY,CACVf,QAAS,eACTlG,gBAAiB,cACjBL,YAAa,QAEfyE,SAAUA,EACV5I,MAAOA,EACPwL,YAAaA,KCgCJE,GArCgB,SAAC,GAA+B,IAA7BxJ,EAA4B,EAA5BA,MAAOwH,EAAqB,EAArBA,SAAUtJ,EAAW,EAAXA,KAC3C0J,EAAU1J,EAAKrB,SAASmD,GACtBlC,EAAoB8J,EAApB9J,MAAOE,EAAa4J,EAAb5J,SAF6C,EAGtByL,oBAAS,GAHa,mBAGrDC,EAHqD,KAGxCC,EAHwC,KAItDC,EAA2BC,iBAAO,MACxC,OACE,yBACE1C,MAAO,CACL/E,OFvBiB,QEwBjB0H,QAAS9J,EAAQ,GAEnB4J,IAAKA,EACLG,cAAe,SAACC,GACdA,EAAE1D,iBACFqD,GAAe,KAGjB,kBAAC,GAAD,CACEjD,SAAU,SAACL,GACTmB,EAASpG,EAAclD,EAAKlB,GAAIgD,EAAOqG,EAAM4D,cAAcnM,SAE7DA,MAAOA,EACPwL,YAAY,YAEd,kBAAC,GAAD,CACE/B,KAAMmC,EACN/B,QAAS,kBAAMgC,GAAe,IAC9BnC,SAAUA,EACVC,SAAUmC,EAAIM,QACdlK,MAAOA,EACP9B,KAAMA,IAEPF,EAAW,kBAACmM,GAAA,EAAD,MAAY,K,kBC7CfC,GAFOC,aAAW,CAAEC,QAAS,CAAE5I,SAAU,KAAlC2I,CAA0CjB,MCiKjDH,GA5Ia,SAAtBA,EAAuB,GAOtB,IANL/K,EAMI,EANJA,KACAsJ,EAKI,EALJA,SACA3H,EAII,EAJJA,eACAsE,EAGI,EAHJA,YACA7F,EAEI,EAFJA,QACGiM,EACC,4EACEC,EAAUlC,KACVmC,EAAkBhI,IACpBiI,EAAe,GACfC,EAAgB,GACpB,GAAIxG,EAAa,CACf,IACc,EADRpE,EAAWoE,EAAYjG,EAAKlB,IAClC,GAAI+C,EACF2K,EAAY,UAAG3K,EAAS4E,YAAZ,QAAoB,GAChCgG,EACqB,YAAnB5K,EAAS2E,MACL+F,EAAgB/H,QAChB+H,EAAgB7H,UAG1B,GAAI3D,EAAcf,GAAO,CAAC,IAChBlB,EAAyBkB,EAAzBlB,GAAIH,EAAqBqB,EAArBrB,SAAUC,EAAWoB,EAAXpB,OACtB,OACE,yBACE8J,UAAW4D,EAAQvB,SACnB9B,MAAO,CACLyD,iBAAiB,UAAD,OAAYtM,EAAUH,EAASD,GAA/B,aJjDD,QIiDC,KAChBuK,oBAAoB,UAAD,OAAY3L,EAAOM,OAAnB,aAGrB,yBACE+J,MAAO,CACL2C,QAAS,IACThB,WAAW,YAAD,OAAchM,EAAOM,UAGjC,kBAAC,GAAD,CAAeyN,MAAOH,GACpB,6BACE,kBAAC,gBAAD,CACE1N,GAAIA,EACJ8N,UAAWhO,EAAOY,KAAI,SAACJ,GACrB,MAAO,CACLyN,SAAUzN,EAAMN,GAChBgO,aAAc,MACdC,aAAc,cAIlB,uCACErE,UAAS,UAAK4D,EAAQrB,eAAb,YAA+BwB,EAA/B,MACLJ,GAEH1N,EAASa,KAAI,SAACC,EAAMqC,GACnB,OACE,kBAAC,GAAD,eACEkL,IAAG,UAAKvN,EAAL,YAAaqC,GAChB9B,KAAMA,EACN8B,MAAOA,EACPwH,SAAUA,GACN7J,YAUnBb,EAAOY,KAAI,SAACJ,EAAO0C,GAClB,OACE,yBACEkL,IAAK5N,EAAMN,GACXmK,MAAO,CACL2B,WAAW,GAAD,OAAK9I,EAAL,aACV8J,QAASxM,EAAMT,SAAS,GAAf,UACFS,EAAMT,SAAS,GAAGkB,IAAMI,EAASD,GAAQ,GAC5C,IAGN,kBAAC+K,EACK,CACF/K,KAAMZ,EACNkK,WACA3H,iBACAvB,UACA6F,qBAQT,GAAsB,kBAAlBjG,EAAKnB,SACd,OACE,kBAAC,GAAD,CAAe8N,MAAOH,GACpB,6BACE,kBAAC,gBAAD,CAAe1N,GAAIkB,EAAKlB,IACtB,uCACE4J,UAAS,oCAA+B+D,IACpCJ,GAFN,IAKE,kBAAC,GAAD,CACE7D,SAAU,gBAAoB5I,EAApB,EAAGmM,cAAiBnM,MAApB,OACR0J,EAAStG,EAAoBhD,EAAKlB,GAAIc,KAExCA,MAAOI,EAAK4B,kBACZwJ,YAAY,aAOnB,GAAsB,aAAlBpL,EAAKnB,SACd,OACE,kBAAC,GAAD,CAAe8N,MAAOH,GACpB,6BACE,kBAAC,gBAAD,CAAe1N,GAAIkB,EAAKlB,IACtB,uCACE4J,UAAS,iCAA4B+D,IACjCJ,GAFN,QAWR,MAAM,IAAIzL,MAAJ,yDAC8CmI,KAAKC,UAAUhJ,MCxExDqK,GArEG,SAAC,GAAuC,IAArCzB,EAAoC,EAApCA,aAAcU,EAAsB,EAAtBA,SAC3BgD,EAAUlC,KACRhK,EAA4CwI,EAA5CxI,QAASkB,EAAmCsH,EAAnCtH,KAAMK,EAA6BiH,EAA7BjH,eAAgBE,EAAa+G,EAAb/G,SACjCoL,ECRa,SAARC,EAASC,EAAeC,GACnC,OAAID,EAAQC,EACJ,CAAED,GAAR,mBAAkBD,EAAMC,EAAQ,EAAGC,KAE5B,GDIIF,CAAM,EAAG9M,GACtB,OACE,kBAAC,GAAD,CAAeuM,MAAQ9K,EAASqF,QAAkC,GAAxBrF,EAASwL,cACjD,yBACE3E,UAAW4D,EAAQjC,UACnBpB,MAAO,CACLyD,iBAAiB,UAAD,OAAYtM,EAAU,EAAtB,aLxBD,QKwBC,OAGjB6M,EAAKzN,KAAI,SAACK,GACT,OACE,yBACE6I,UAAW4D,EAAQ3B,UACnBqC,IAAKnN,EACLoJ,MAAO,CAAE2C,QAAS/L,IAHpB,UAKMA,EALN,SASJ,yBACE6I,UAAW4D,EAAQxB,kBACnB7B,MAAO,CACL2C,QAAQ,YAAD,OAAcqB,EAAK/N,UAG5B,kBAAC,GAAD,CACEc,KAAMsB,EACNgI,SAAUA,EACV3H,eAAgBA,EAChBsE,YAAapE,EAASqF,QAAUrF,EAASA,cAAWyL,EACpDlN,QAASA,KAGZqB,OAAO8L,KAAK5L,GAAgBnC,KAAI,SAACgO,GAChC,IAAM3N,EAAMc,OAAO6M,GAD2B,EAElB7L,EAAe9B,GAAnCsC,EAFsC,EAEtCA,UAAWD,EAF2B,EAE3BA,KACnB,OACE,yBACEwG,UAAW4D,EAAQzB,cACnBmC,IAAKnN,EACLoJ,MAAO,CAAE2C,QAAS/L,IAElB,kBAAC,GAAD,CACEoJ,MAAO,CAAEwE,YAAa,QACtBjF,SAAU,gBAA2BrG,EAA3B,EAAG4J,cAAiBnM,MAApB,OACR0J,EAASnG,EAAoBtD,EAAK,CAAEsC,gBAEtCvC,MAAOuC,EACPiJ,YAAY,QAEd,kBAAC,GAAD,CACE5C,SAAU,gBAA2BtG,EAA3B,EAAG6J,cAAiBnM,MAApB,OACR0J,EAASnG,EAAoBtD,EAAK,CAAEqC,WAEtCtC,MAAOsC,EACPkJ,YAAY,gBEgCbsC,GArF0D,SAAC,GAGtD,ICrBlBC,EDqBiB,IAFjBC,uBAEiB,MAFC,GAED,EADjBjH,EACiB,EADjBA,QACiB,EACe4E,mBAASqC,GADxB,mBACV3F,EADU,KACAC,EADA,OAE4C2F,aAAU,WAAV,eCvB7DF,EDwBkBrL,ECnBf,CACH,WAEEwL,GACI,IAAD,mBAFFC,EAEE,KAFIC,EAEJ,KAFaC,EAEb,KACH,OAAQH,EAAOzF,MACb,IAAK,OAAL,kBACwC0F,GAA/BG,EADT,KAEE,MAAO,CAFT,WAE0BA,EAAjB,CAA4BF,GAA5B,mBAAwCC,KACjD,IAAK,OAAL,kBACmCA,GAA1BE,EADT,KACkBC,EADlB,WAEE,MAAO,CAAC,CAACJ,GAAF,mBAAcD,IAAOI,EAAMC,GACpC,QACE,MAAO,CAAC,CAACJ,GAAF,mBAAcD,IAAOJ,EAAaK,EAASF,GAAc,MAGtE,CAAC,GfyFyB,SAAC7F,GAC3B,IAAMjG,EAAeiG,EAASxH,MAAM,KACpC,MAAO,CACLa,KAAM/B,EAAcyC,GACpB5B,QAAS4B,EAAa9C,OAAS,EAC/ByC,eAAgB,GAChBE,SAAU,CAAEqF,SAAS,EAAMrF,SAAU,Kc5FNwM,CAAapG,GCH3B,QDAF,yCAETqG,EAFS,KAEG1F,EAFH,KAEiB2F,EAFjB,KAEgCjF,EAFhC,KAYThI,EAAmCsH,EAAnCtH,KAAMK,EAA6BiH,EAA7BjH,eAAgBE,EAAa+G,EAAb/G,SAE9B2M,qBAAU,WACJlQ,OAAOmQ,QACTxH,GAAU3F,EAAMK,EAAgBgF,GAC7B+H,MAAK,YAAmB,IAAhB7M,EAAe,EAAfA,SACP,OAAOyH,EAASrG,EAAe,CAAEiE,SAAS,EAAMrF,iBAEjD8M,OAAM,YAAyB,IAAtBC,EAAqB,EAArBA,QACR,OAAOtF,EACLrG,EAAe,CAAEiE,SAAS,EAAOmG,aAAcuB,UAItD,CAACtF,EAAU3H,EAAgBL,EAAMqF,IACpC,IAAM2F,EAAUlJ,IACVmJ,EAAkBhI,IAClBsK,EAAclD,iBAAuB,MAC3C,OACE,0BAAMjD,UAAW4D,EAAQhJ,YACvB,yBAAKoF,UAAW4D,EAAQzI,gBAAiB6H,IAAKmD,GAE5C,kBAAC,GAAD,CACE5G,SAAUA,EACVD,SA9BqB,SAAC8G,GAC5B5G,EAAY4G,GACZ,IAAM9M,EAAe8M,EAASrO,MAAM,KACpC6I,EAAS5G,EAAWV,KA4BdkG,YAAaA,IAEf,0BAAMQ,UAAU,gBACd,kBAACqG,EAAA,EAAD,CACExG,aAAW,OACXG,UAAU,cACVyB,QAAS,WACPb,EAAS,CAAEjB,KAAM,UAEnB2G,UAAWV,EAAWpP,QAEtB,kBAAC+P,EAAA,EAAD,OAEF,kBAACF,EAAA,EAAD,CACExG,aAAW,OACXG,UAAU,cACVyB,QAAS,WACPb,EAAS,CAAEjB,KAAM,UAEnB2G,UAAWT,EAAarP,QAExB,kBAACgQ,EAAA,EAAD,SAIN,yBACExG,UAAS,UAAK4D,EAAQxI,YAAb,YACPjC,EAASqF,QAAU,GAAKqF,EAAgB7H,YAG1C,kBAAC,kBAAD,CACEyK,YAAa,EACblG,MAAO,CAAEgB,OAAQ,GACjBmF,kBAAmB,CAAEnF,QAAS,GAC9BoF,YAAY,QACZC,UAAU,GAEV,kBAAC,GAAD,CAAW1G,aAAcA,EAAcU,SAAUA,MAGrD,kBAAC,GAAD,CAAgBV,aAAcA,MElG9B2G,GAAuB,CAC3B,CACEC,UAAW,cACX5B,gBALoB,YAMpBjH,QAAS8H,OAAOgB,+BAElB,CAAED,UAAW,cAAe5B,gBAAiB,KAGnC2B,GCUJpQ,SAAQ,aAZU,SACxBqQ,EACA5B,GAEI,IADJjH,EACG,uDADgB8H,OAAOgB,8BAE1BC,IAASC,OACPC,IAAMC,cAAcnC,GAAQ,CAAEE,kBAAiBjH,YAC/CmJ,SAASC,eAAeP,IAMxB9M,CADyD,EAA1C8M,UAA0C,EAA/B5B,gBAA+B,EAAdjH,YnB6GzC,kBAAmBqJ,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAACyB,GAClCA,EAAaC,kB","file":"static/js/main.dbb1ae6c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import {\n  ContradictionNode,\n  FinishedNode,\n  FormulaNode,\n  NodeGenerator,\n  OpenLeafNode,\n  TreeForm,\n  TreeNode,\n} from '../typings/TreeState'\nimport { isNonEmptyArray } from './util'\n\nexport const makeNode = ({\n  formulas = [],\n  forest = [],\n  id,\n}: Partial<FormulaNode> & {\n  id: string\n}): FormulaNode => {\n  return {\n    nodeType: 'formulas',\n    formulas,\n    forest,\n    id,\n  }\n}\n\nexport const makeContradictionNode = (parentId: string): ContradictionNode => ({\n  nodeType: 'contradiction',\n  formulas: [],\n  contradictoryRows: '',\n  id: `${parentId}0`,\n})\n\nexport const makeFinishedNode = (parentId: string): FinishedNode => ({\n  nodeType: 'finished',\n  formulas: [],\n  id: `${parentId}0`,\n})\n\n/**\n *\n * @param root The root of a subTree\n * @param createNodes function that creates new node objects\n */\nexport const destructivelyAppendChildren = (\n  root: TreeNode,\n  createNodes: NodeGenerator\n): void => {\n  if (root.nodeType === 'contradiction') {\n    return\n  } else if (root.nodeType === 'finished') {\n    // TODO: Special Handling for FinishedNodes?\n    console.warn(\"shouldn't try to append to finished branch\")\n    return\n  } else if (root.forest.length === 0) {\n    root.forest = createNodes(root.id)\n  } else {\n    root.forest.forEach((child) =>\n      destructivelyAppendChildren(child, createNodes)\n    )\n  }\n}\n\n/**\n *\n * @param formulas an array of of formulas.\n */\nexport const parsePremises = (formulas: string[]): FormulaNode => {\n  return makeNode({\n    formulas: formulas.map((form, idx) => makeTreeForm(form, idx + 1)),\n    forest: [],\n    id: '',\n  })\n}\n\nconst makeTreeForm = (value = '', row: number): TreeForm => ({\n  value,\n  resolved: false,\n  row,\n})\n\nexport const isOpenLeaf = (node: TreeNode | null): node is OpenLeafNode =>\n  node != null && node.nodeType === 'formulas' && node.forest.length === 0\n\nexport const lastRow = (node: FormulaNode) =>\n  firstRow(node) + node.formulas.length\n\nexport const firstRow = (node: FormulaNode) => node.formulas[0].row\n\nexport const makeEmptyFormulas = (n: number, nextRow: number): TreeForm[] => {\n  const arr = []\n  while (n-- > 0) {\n    arr.push(makeTreeForm('', nextRow++))\n  }\n  return arr\n}\n\nexport const convertIdToPath = (id: string): (0 | 1)[] =>\n  id.split('').map((char: string) => {\n    if (char === '0' || char === '1') {\n      return Number(char) as 0 | 1\n    } else {\n      throw new Error(`invalid character in node id: ${char} in ${id}`)\n    }\n  })\n\nexport const getNode = (root: FormulaNode, id: string): TreeNode => {\n  const nodePath: (0 | 1)[] = convertIdToPath(id)\n  let currentNode: TreeNode = root\n  for (const idx of nodePath) {\n    if (currentNode.nodeType !== 'formulas') {\n      throw new Error('Failed to get node path')\n    }\n    currentNode = currentNode.forest[idx]\n  }\n  return currentNode\n}\n\nexport const isNonLeafNode = (\n  node: TreeNode\n): node is FormulaNode & { forest: FormulaNode[] } =>\n  isFormulaNode(node) &&\n  isNonEmptyArray(node.forest) &&\n  node.forest[0]?.nodeType === 'formulas'\n\nexport const isFormulaNode = (node: TreeNode): node is FormulaNode =>\n  node.nodeType === 'formulas'\n","import {\n  Actions,\n  createActionCreators,\n  createReducerFunction,\n  ImmerReducer,\n  ImmerReducerFunction,\n} from 'immer-reducer'\nimport { Dispatch } from 'react'\n\nimport { CheckerFeedback } from './typings/Checker'\nimport {\n  FormulaNode,\n  Justification,\n  JustificationMap,\n} from './typings/TreeState'\nimport {\n  destructivelyAppendChildren,\n  getNode,\n  makeContradictionNode,\n  makeEmptyFormulas,\n  makeFinishedNode,\n  makeNode,\n  parsePremises,\n} from './util/nodes'\n\nexport type RudolfStore = {\n  tree: FormulaNode\n  nextRow: number\n  justifications: JustificationMap\n  feedback: CheckerFeedback\n}\n\nexport class RudolfReducer extends ImmerReducer<RudolfStore> {\n  updateFormula(nodeId: string, formulaIndex: number, newValue: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    draftNode.formulas[formulaIndex].value = newValue\n  }\n\n  updateJustification(nodeRow: number, justification: Partial<Justification>) {\n    Object.assign(this.draftState.justifications[nodeRow], justification)\n  }\n\n  updateContradiction(id: string, contradictoryRows: string) {\n    Object.assign(getNode(this.draftState.tree, id), { contradictoryRows })\n  }\n\n  updateFeedback(feedback: CheckerFeedback) {\n    this.draftState.feedback = feedback\n  }\n\n  toggleResolved(nodeId: string, index: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    draftNode.formulas[index].resolved = !draftNode.formulas[index].resolved\n  }\n\n  createTree(premiseArray: string[]) {\n    this.draftState.tree = parsePremises(premiseArray)\n    this.draftState.nextRow = premiseArray.length + 1\n    this.draftState.justifications = {}\n  }\n\n  continueBranch(nodeId: string, formulaCount: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    destructivelyAppendChildren(draftNode, (id) => [\n      makeNode({\n        id: `${id}0`,\n        formulas: makeEmptyFormulas(formulaCount, this.draftState.nextRow),\n      }),\n    ])\n\n    this.draftState.justifications[this.draftState.nextRow] = {\n      rule: '',\n      parentRow: '',\n    }\n    this.draftState.nextRow += formulaCount\n  }\n\n  splitBranch(nodeId: string, formulaCount: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    destructivelyAppendChildren(draftNode, (id) => {\n      const formulas = makeEmptyFormulas(formulaCount, this.draftState.nextRow)\n      return [\n        makeNode({\n          id: `${id}0`,\n          formulas,\n        }),\n        makeNode({\n          id: `${id}1`,\n          formulas,\n        }),\n      ]\n    })\n    this.draftState.justifications[this.draftState.nextRow] = {\n      rule: '',\n      parentRow: '',\n    }\n    this.draftState.nextRow += formulaCount\n  }\n\n  markContradiction(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = [makeContradictionNode(draftNode.id)]\n  }\n\n  markFinished(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = [makeFinishedNode(nodeId)]\n  }\n\n  reopenBranch(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = []\n  }\n}\n\nexport const initialState = (premises: string): RudolfStore => {\n  const premiseArray = premises.split(',')\n  return {\n    tree: parsePremises(premiseArray),\n    nextRow: premiseArray.length + 1,\n    justifications: {},\n    feedback: { success: true, feedback: {} },\n  }\n}\n\nexport const rudolfReducer: ImmerReducerFunction<typeof RudolfReducer> = createReducerFunction(\n  RudolfReducer\n)\n\nexport const {\n  continueBranch,\n  createTree,\n  markContradiction,\n  markFinished,\n  reopenBranch,\n  splitBranch,\n  toggleResolved,\n  updateContradiction,\n  updateFeedback,\n  updateFormula,\n  updateJustification,\n} = createActionCreators(RudolfReducer)\nexport type RudolfAction = Actions<typeof RudolfReducer>\nexport type CustomDispatch = Dispatch<RudolfAction>\n","import { createUseStyles } from 'react-jss'\n\nconst appJSS = createUseStyles({\n  AppBounder: {\n    color: 'black',\n    fontSize: 'calc(8px + 1.5vmin)',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    margin: '1em',\n  },\n\n  TopItemsBounder: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n\n  TreeBounder: {\n    borderStyle: 'solid',\n    borderWidth: '.1em',\n    borderRadius: '.2em',\n    '&::-webkit-scrollbar': {\n      height: '6px',\n      width: '6px',\n    },\n    '&::-webkit-scrollbar-thumb': {\n      backgroundColor: 'black',\n    },\n    maxWidth: '80vw',\n    overflowX: 'scroll',\n  },\n})\n\nexport default appJSS\n","import { createUseStyles } from 'react-jss'\n\nconst feedbackJSS = createUseStyles({\n  Correct: {\n    borderColor: 'green',\n  },\n\n  Incorrect: {\n    borderColor: 'red',\n  },\n})\n\nexport default feedbackJSS\n","import {\n  FeedbackMap,\n  FeedbackNode,\n  SequentNode,\n  FeedbackMessage,\n  CheckerFeedbackSuccess,\n  Checker,\n} from '../typings/Checker'\nimport { FormulaNode, JustificationMap, TreeForm } from '../typings/TreeState'\nimport { firstRow } from './nodes'\n\nexport const convertToSequent = (\n  { formulas: newFormulas, forest, id }: FormulaNode,\n  justifications: JustificationMap,\n  previousFormulas: TreeForm[] = []\n): SequentNode => {\n  const formulas = previousFormulas.concat(newFormulas)\n  if (forest.length === 0) {\n    return { label: convertFormulas(formulas), rule: '', forest: [], id }\n  } else {\n    const [child] = forest\n    if (child.nodeType === 'formulas') {\n      const justification = justifications[firstRow(child)]\n      const { rule } = justification\n      const parentRow = Number(justification.parentRow)\n      if (!validRow(parentRow)) {\n        throw new Error(\n          `Cited row must be a positive integer. Got \"${parentRow}\"`\n        )\n      }\n      if (parentRow >= firstRow(child)) {\n        throw new Error(\n          `Row cited (${parentRow}) must be less than current row (${firstRow(\n            child\n          )}).`\n        )\n      }\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        forest: [\n          {\n            label: rearrangeFormulas(formulas, parentRow),\n            rule,\n            id,\n            forest: forest.map((node) =>\n              convertToSequent(\n                node as FormulaNode,\n                justifications,\n                formulas.filter((form) => !(form.row === parentRow))\n              )\n            ),\n          },\n        ],\n      }\n    } else if (child.nodeType === 'contradiction') {\n      // We expect parentRow to be \"<number>,<number>\"\n      const [row1, row2] = child.contradictoryRows.split(',').map(Number)\n      if (![row1, row2].every(validRow)) {\n        throw new Error(\n          `Contradiction must cite 2 rows, separated by a comma. Got \"${child.contradictoryRows}\"`\n        )\n      }\n      const [form1, form2] = formulas\n        .filter((form) => [row1, row2].includes(form.row))\n        // this sort is a hack to avoid parsing for negation symbol, which may vary\n        .sort((a, b) => b.value.length - a.value.length)\n      if (!(form1 && form2)) {\n        throw new Error('Contradiction cites non-existent row')\n      }\n      const contradictionSequent: string = convertFormulas([\n        ...formulas.filter((form) => ![row1, row2].includes(form.row)),\n        form1,\n        form2,\n      ])\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        id,\n        forest: [\n          {\n            label: contradictionSequent,\n            rule: 'Ax',\n            id: child.id,\n            forest: [{ label: '', rule: '', forest: [] }],\n          },\n        ],\n      }\n    } else if (child.nodeType === 'finished') {\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        id,\n        forest: [\n          {\n            label: convertFormulas(formulas),\n            rule: 'Lit',\n            id: child.id,\n            forest: [\n              {\n                label: '',\n                rule: '',\n                forest: [],\n              },\n            ],\n          },\n        ],\n      }\n    } else {\n      throw new Error('this was supposed to be exhaustive')\n    }\n  }\n}\n\nexport const processFeedback = (\n  sequentRoot: SequentNode,\n  feedbackRoot: FeedbackNode\n): FeedbackMap => {\n  const feedbackMap: FeedbackMap = {}\n  if (sequentRoot.forest.length) {\n    // close over (mutable) feedback map for recursive calls\n    const rec = (\n      sequent: SequentNode,\n      feedbackNode: FeedbackNode,\n      parentFeedback: FeedbackMessage\n    ): void => {\n      // detect dummy nodes inserted to pad tree\n      if (typeof sequent.id === 'string') {\n        if (sequent.rule === 'Ax' || sequent.rule === 'Lit') {\n          feedbackMap[sequent.id] = extractMessage(feedbackNode)\n          return\n        } else {\n          feedbackMap[sequent.id] = parentFeedback\n          sequent.forest.forEach((childSequent, idx) => {\n            rec(\n              childSequent,\n              feedbackNode.forest[idx],\n              extractMessage(feedbackNode)\n            )\n          })\n        }\n      } else {\n        sequent.forest.forEach((childSequent, idx) => {\n          rec(childSequent, feedbackNode.forest[idx], parentFeedback)\n        })\n      }\n    }\n    // recursive call\n    rec(sequentRoot, feedbackRoot, {\n      class: 'correct',\n      info: 'Assumptions',\n    })\n  }\n  return feedbackMap\n}\n\n// Promisified checker\nconst checkSequent = async (\n  sequent: SequentNode,\n  checker: Checker\n): Promise<FeedbackNode> => {\n  return new Promise((resolve, reject) => {\n    try {\n      checker(sequent, (result: FeedbackNode) => {\n        resolve(result)\n      })\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\nexport const checkTree = async (\n  tree: FormulaNode,\n  justifications: JustificationMap,\n  checker: Checker\n): Promise<CheckerFeedbackSuccess> => {\n  const sequent = convertToSequent(tree, justifications)\n  const feedback: FeedbackNode = await checkSequent(sequent, checker)\n  return {\n    success: true,\n    feedback: processFeedback(sequent, feedback),\n  }\n}\n\nconst rearrangeFormulas = (\n  forms: TreeForm[],\n  mainFormulaRow: number\n): string => {\n  const idx = forms.findIndex((form) => form.row === mainFormulaRow)\n  const mainFormula = forms[idx]\n  const formulasWithoutMain = forms.slice(0, idx).concat(forms.slice(idx + 1))\n  const newList = [...formulasWithoutMain, mainFormula]\n  return convertFormulas(newList)\n}\n\nconst convertFormulas = (forms: TreeForm[]) =>\n  forms\n    .map(({ value }) => value)\n    .join(',')\n    .concat(':|-:')\n\nconst validRow = (maybeRow: number): boolean => maybeRow > 0\n\n// returns the non-recursive properties of the FeedbackNode\nconst extractMessage = ({\n  forest,\n  ...feedback\n}: FeedbackNode): FeedbackMessage => translateFeedback(feedback)\n\nconst feedbackMessages: { [message: string]: string } = {\n  'WRONG NUMBER OF PREMISES': 'Wrong number of branches.',\n  \"THIS DOESN'T FOLLOW BY THIS RULE\": 'Incorrect use of resolution rule.',\n}\n\nconst translateFeedback = (feedback: FeedbackMessage): FeedbackMessage => ({\n  ...feedback,\n  info: feedbackMessages[feedback.info.toLocaleUpperCase()] ?? feedback.info,\n})\n","import React, { FormEventHandler } from 'react'\nimport AutosizeInput from 'react-input-autosize'\n\ntype Props = {\n  onSubmit: (premises: string) => void\n  premises: string\n  setPremises: (premises: string) => void\n}\n\nconst PremiseInput: React.FC<Props> = ({ onSubmit, premises, setPremises }) => {\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault()\n    onSubmit(premises)\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <AutosizeInput\n        type=\"text\"\n        name=\"premises\"\n        aria-label=\"Enter Premises\"\n        value={premises}\n        onChange={(event) => setPremises(event.target.value)}\n      />\n      <button className=\"submit-premises\" type=\"submit\">\n        Declare Premises\n      </button>\n    </form>\n  )\n}\n\nexport default PremiseInput\n","import { Feedback } from '@material-ui/icons';\nimport React from 'react';\n\nimport { RudolfStore } from '../RudolfReducer';\n\ntype Props = { currentState: RudolfStore }\n\nconst RudolfFeedback: React.FC<Props> = (currentState) => (\n  <a\n    href={`mailto:phil.logic.ubc@gmail.com?subject=${encodeURIComponent(\n      `USER FEEDBACK - `\n    )}&body=${encodeURIComponent(\n      `DESCRIBE YOUR PROBLEM OR SUGGESTION HERE \\n\\n\\n\\n${JSON.stringify(\n        currentState\n      )}`\n    )}`}\n    style={{ alignSelf: 'flex-end' }}\n  >\n    feedback\n    <Feedback></Feedback>\n  </a>\n)\n\nexport default RudolfFeedback\n","import { Menu, MenuItem } from '@material-ui/core'\nimport React, { FC } from 'react'\n\nimport {\n  CustomDispatch,\n  toggleResolved,\n  continueBranch,\n  splitBranch,\n  markContradiction,\n  markFinished,\n  reopenBranch,\n} from '../RudolfReducer'\nimport { TreeNode } from '../typings/TreeState'\nimport { isOpenLeaf } from '../util/nodes'\n\ntype Props = {\n  onClose: () => void\n  open: boolean\n  index: number\n  node: TreeNode\n  anchorEl: Element\n  dispatch: CustomDispatch\n}\n\n/**\n * @TODO make context menu work for each of\n * - Formula Node:\n *   - branch commands\n *\n * - Contradiction/Finished node:\n *   - Reopen.\n * - Formula:\n *   - branch commands\n *   - (un)resolve\n *   - close branch.\n */\n\nexport const NodeMenu: FC<Props> = ({\n  open,\n  dispatch,\n  index,\n  anchorEl,\n  onClose: close,\n  node,\n}) => {\n  const formula = node.formulas[index]\n  return (\n    <Menu\n      open={open}\n      getContentAnchorEl={null}\n      anchorEl={anchorEl}\n      onClose={close}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'center',\n      }}\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      style={{ zIndex: 2000 }}\n    >\n      <MenuItem\n        onClick={() => {\n          dispatch(continueBranch(node.id, 1))\n          close()\n        }}\n      >\n        Continue Branch w/ 1 formula\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(splitBranch(node.id, 1))\n          close()\n        }}\n      >\n        Split Branch w/ 1 formula\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(continueBranch(node.id, 2))\n          close()\n        }}\n      >\n        Continue Branch w/ 2 formulas\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(splitBranch(node.id, 2))\n          close()\n        }}\n      >\n        Split Branch w/ 2 formulas\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(toggleResolved(node.id, index))\n          close()\n        }}\n      >\n        Mark as {formula.resolved ? 'Un' : ''}Resolved\n      </MenuItem>\n      {isOpenLeaf(node) && (\n        <MenuItem\n          onClick={() => {\n            dispatch(markContradiction(node.id))\n            close()\n          }}\n        >\n          Close Branch With Contradiction\n        </MenuItem>\n      )}\n      {isOpenLeaf(node) && (\n        <MenuItem\n          onClick={() => {\n            dispatch(markFinished(node.id))\n            close()\n          }}\n        >\n          Mark Branch Finished\n        </MenuItem>\n      )}\n      {node.nodeType === 'contradiction' && (\n        <MenuItem\n          onClick={() => {\n            dispatch(reopenBranch(node.id))\n            close()\n          }}\n        >\n          Reopen Branch\n        </MenuItem>\n      )}\n    </Menu>\n  )\n}\n","import { createUseStyles } from 'react-jss'\n\nexport const rowHeight = '1.5em'\nexport const rowGap = '.75em'\nconst columnGap = '.5em'\n\nconst nodeviewJSS = createUseStyles({\n  TruthTree: {\n    display: 'grid',\n    padding: '0.2em',\n    gridTemplateColumns:\n      '[rowNumber] auto [nodeView] auto [justification] auto',\n    placeItems: 'center',\n    columnGap,\n    rowGap,\n  },\n\n  RowNumber: {\n    gridColumn: 'rowNumber',\n  },\n\n  Justification: {\n    gridColumn: 'justification',\n    display: 'flex',\n    alignSelf: 'start',\n  },\n\n  NodeViewContainer: {\n    gridColumn: 'nodeView',\n  },\n\n  NodeView: {\n    display: 'grid',\n    textAlign: 'center',\n    columnGap,\n    rowGap,\n  },\n\n  FormulaBounder: {\n    display: 'grid',\n    borderRadius: '.2em',\n    borderWidth: '.1em',\n    borderStyle: 'solid',\n    borderColor: 'transparent',\n    rowGap,\n  },\n\n  Tooltip: {\n    fontSize: '3em',\n  },\n})\n\nexport default nodeviewJSS\n","import React, { ChangeEvent } from 'react'\nimport AutosizeInput from 'react-input-autosize'\nimport CSS from 'csstype'\n\ntype Props = {\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void\n  value: string\n  placeholder: string\n  style?: CSS.Properties\n}\n\nfunction StyledAutosizeInput({ onChange, value, placeholder, style }: Props) {\n  return (\n    <AutosizeInput\n      style={style}\n      inputStyle={{\n        padding: '0vmin .5vmin',\n        backgroundColor: 'transparent',\n        borderStyle: 'none',\n      }}\n      onChange={onChange}\n      value={value}\n      placeholder={placeholder}\n    />\n  )\n}\n\nexport default StyledAutosizeInput\n","import React, { FC, useState, useRef, Ref } from 'react'\nimport { Check } from '@material-ui/icons'\nimport { CustomDispatch, updateFormula } from '../RudolfReducer'\nimport { NodeMenu } from './NodeMenu'\nimport { FormulaNode } from '../typings/TreeState'\nimport { rowHeight } from '../styles/NodeView_styles'\nimport StyledAutosizeInput from './StyledAutosizeInput'\n\ninterface Props {\n  row: number\n  value: string\n  resolved: boolean\n  node: FormulaNode\n  index: number\n  dispatch: CustomDispatch\n}\n\nconst FormulaView: FC<Props> = ({ index, dispatch, node }) => {\n  const formula = node.formulas[index]\n  const { value, resolved } = formula\n  const [contextMenu, setContextMenu] = useState(false) // Convert to reducer action/field w/ ref, node, optional index.\n  const ref: Ref<HTMLDivElement> = useRef(null)\n  return (\n    <div\n      style={{\n        height: rowHeight,\n        gridRow: index + 1,\n      }}\n      ref={ref}\n      onContextMenu={(e) => {\n        e.preventDefault()\n        setContextMenu(true)\n      }}\n    >\n      <StyledAutosizeInput\n        onChange={(event) => {\n          dispatch(updateFormula(node.id, index, event.currentTarget.value))\n        }}\n        value={value}\n        placeholder=\"formula\"\n      />\n      <NodeMenu\n        open={contextMenu}\n        onClose={() => setContextMenu(false)}\n        dispatch={dispatch}\n        anchorEl={ref.current as HTMLDivElement}\n        index={index}\n        node={node}\n      />\n      {resolved ? <Check /> : ''}\n    </div>\n  )\n}\n\nexport default FormulaView\n","import { withStyles, Tooltip } from '@material-ui/core'\n\nconst CustomTooltip = withStyles({ tooltip: { fontSize: 16 } })(Tooltip)\n\nexport default CustomTooltip\n","import React, { FC } from 'react'\nimport { ArcherElement } from 'react-archer'\n\nimport { CustomDispatch, updateContradiction } from '../RudolfReducer'\nimport { FeedbackMap } from '../typings/Checker'\nimport { JustificationMap, TreeNode } from '../typings/TreeState'\nimport { firstRow, isFormulaNode } from '../util/nodes'\nimport FormulaView from './FormulaView'\nimport nodeviewJSS, { rowHeight } from '../styles/NodeView_styles'\nimport StyledAutosizeInput from './StyledAutosizeInput'\nimport CustomTooltip from './CustomTooltip'\nimport feedbackJSS from '../styles/feedback_styles'\n\ntype Props = {\n  node: TreeNode\n  dispatch: CustomDispatch\n  justifications: JustificationMap\n  feedbackMap?: FeedbackMap\n  nextRow: number\n}\n\n// TODO: allow context menu on nodes?\n\nconst NodeView: FC<Props> = ({\n  node,\n  dispatch,\n  justifications,\n  feedbackMap,\n  nextRow,\n  ...props\n}) => {\n  const classes = nodeviewJSS()\n  const feedbackClasses = feedbackJSS()\n  let feedbackInfo = ''\n  let feedbackClass = ''\n  if (feedbackMap) {\n    const feedback = feedbackMap[node.id]\n    if (feedback) {\n      feedbackInfo = feedback.info ?? ''\n      feedbackClass =\n        feedback.class === 'correct'\n          ? feedbackClasses.Correct\n          : feedbackClasses.Incorrect\n    }\n  }\n  if (isFormulaNode(node)) {\n    const { id, formulas, forest } = node\n    return (\n      <div\n        className={classes.NodeView}\n        style={{\n          gridTemplateRows: `repeat(${nextRow - firstRow(node)}, ${rowHeight})`,\n          gridTemplateColumns: `repeat(${forest.length}, auto)`,\n        }}\n      >\n        <div\n          style={{\n            gridRow: '1',\n            gridColumn: `1 / span ${forest.length}`,\n          }}\n        >\n          <CustomTooltip title={feedbackInfo}>\n            <div>\n              <ArcherElement\n                id={id}\n                relations={forest.map((child) => {\n                  return {\n                    targetId: child.id,\n                    targetAnchor: 'top',\n                    sourceAnchor: 'bottom',\n                  }\n                })}\n              >\n                <div\n                  className={`${classes.FormulaBounder} ${feedbackClass} `}\n                  {...props}\n                >\n                  {formulas.map((form, index) => {\n                    return (\n                      <FormulaView\n                        key={`${form}-${index}`}\n                        node={node}\n                        index={index}\n                        dispatch={dispatch}\n                        {...form}\n                      />\n                    )\n                  })}\n                </div>\n              </ArcherElement>\n            </div>\n          </CustomTooltip>\n        </div>\n\n        {forest.map((child, index) => {\n          return (\n            <div\n              key={child.id}\n              style={{\n                gridColumn: `${index} / span 1`,\n                gridRow: child.formulas[0]\n                  ? `${child.formulas[0].row - firstRow(node) + 1}`\n                  : 2,\n              }}\n            >\n              <NodeView\n                {...{\n                  node: child,\n                  dispatch,\n                  justifications,\n                  nextRow,\n                  feedbackMap,\n                }}\n              />\n            </div>\n          )\n        })}\n      </div>\n    )\n  } else if (node.nodeType === 'contradiction') {\n    return (\n      <CustomTooltip title={feedbackInfo}>\n        <div>\n          <ArcherElement id={node.id}>\n            <div\n              className={`closed-branch-marker node ${feedbackClass}`}\n              {...props}\n            >\n              X\n              <StyledAutosizeInput\n                onChange={({ currentTarget: { value } }) =>\n                  dispatch(updateContradiction(node.id, value))\n                }\n                value={node.contradictoryRows}\n                placeholder=\"rows\"\n              />\n            </div>\n          </ArcherElement>\n        </div>\n      </CustomTooltip>\n    )\n  } else if (node.nodeType === 'finished') {\n    return (\n      <CustomTooltip title={feedbackInfo}>\n        <div>\n          <ArcherElement id={node.id}>\n            <div\n              className={`finished-branch-marker ${feedbackClass}`}\n              {...props}\n            >\n              O\n            </div>\n          </ArcherElement>\n        </div>\n      </CustomTooltip>\n    )\n  } else {\n    throw new Error(\n      `Invariant violation: Invalid nodeType on node: ${JSON.stringify(node)}`\n    )\n  }\n}\n\nexport default NodeView\n","import React from 'react'\nimport NodeView from './NodeView'\nimport {\n  RudolfStore,\n  CustomDispatch,\n  updateJustification,\n} from '../RudolfReducer'\nimport nodeviewJSS, { rowHeight } from '../styles/NodeView_styles'\nimport { range } from '../util/helpers'\nimport StyledAutosizeInput from './StyledAutosizeInput'\nimport CustomTooltip from './CustomTooltip'\n\ntype Props = {\n  currentState: RudolfStore\n  dispatch: CustomDispatch\n}\n\nconst TruthTree = ({ currentState, dispatch }: Props) => {\n  const classes = nodeviewJSS()\n  const { nextRow, tree, justifications, feedback } = currentState\n  const rows = range(1, nextRow)\n  return (\n    <CustomTooltip title={!feedback.success ? feedback.errorMessage : ''}>\n      <div\n        className={classes.TruthTree}\n        style={{\n          gridTemplateRows: `repeat(${nextRow - 1}, ${rowHeight})`,\n        }}\n      >\n        {rows.map((row) => {\n          return (\n            <div\n              className={classes.RowNumber}\n              key={row}\n              style={{ gridRow: row }}\n            >\n              {`${row}.`}\n            </div>\n          )\n        })}\n        <div\n          className={classes.NodeViewContainer}\n          style={{\n            gridRow: `1 / span ${rows.length}`,\n          }}\n        >\n          <NodeView\n            node={tree}\n            dispatch={dispatch}\n            justifications={justifications}\n            feedbackMap={feedback.success ? feedback.feedback : undefined}\n            nextRow={nextRow}\n          />\n        </div>\n        {Object.keys(justifications).map((rowString) => {\n          const row = Number(rowString)\n          const { parentRow, rule } = justifications[row]\n          return (\n            <div\n              className={classes.Justification}\n              key={row}\n              style={{ gridRow: row }}\n            >\n              <StyledAutosizeInput\n                style={{ marginRight: '.1em' }}\n                onChange={({ currentTarget: { value: parentRow } }) =>\n                  dispatch(updateJustification(row, { parentRow }))\n                }\n                value={parentRow}\n                placeholder=\"row\"\n              />\n              <StyledAutosizeInput\n                onChange={({ currentTarget: { value: rule } }) =>\n                  dispatch(updateJustification(row, { rule }))\n                }\n                value={rule}\n                placeholder=\"rule\"\n              />\n            </div>\n          )\n        })}\n      </div>\n    </CustomTooltip>\n  )\n}\n\nexport default TruthTree\n","export const isEmptyArray = <T>(\n  maybeArray: Array<T> | string\n): maybeArray is [] => Array.isArray(maybeArray) && maybeArray.length === 0\n\nexport const lastEl = <T>(arr: T[]) => arr[arr.length - 1]\n\n/**\n * @param start start of array (inclusive)\n * @param stop end of array (exclusive)\n * @returns Array of integers from start to stop.\n * if start >= stop, returns empty array\n */\nexport const range = (start: number, stop: number): number[] => {\n  if (start < stop) {\n    return [start, ...range(start + 1, stop)]\n  } else {\n    return []\n  }\n}\n","import '../styles/all.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport { IconButton } from '@material-ui/core'\nimport { Redo, Undo } from '@material-ui/icons'\nimport React, { useEffect, useReducer, useRef, useState } from 'react'\nimport { ArcherContainer } from 'react-archer'\n\nimport {\n  createTree,\n  initialState,\n  rudolfReducer,\n  updateFeedback,\n} from '../RudolfReducer'\nimport appJSS from '../styles/App_styles'\nimport feedbackJSS from '../styles/feedback_styles'\nimport { Checker } from '../typings/Checker'\nimport { makeUndoable } from '../undoableReducer'\nimport { checkTree } from '../util/carnapAdapter'\nimport PremiseInput from './PremiseInput'\nimport RudolfFeedback from './RudolfFeedback'\nimport TruthTree from './TruthTree'\n\nconst Rudolf: React.FC<{ initialPremises?: string; checker: Checker }> = ({\n  initialPremises = '',\n  checker,\n}): JSX.Element => {\n  const [premises, setPremises] = useState(initialPremises)\n  const [[pastStates, currentState, futureStates], dispatch] = useReducer(\n    ...makeUndoable(rudolfReducer, initialState(premises))\n  )\n\n  const handleSubmitPremises = (rawInput: string) => {\n    setPremises(rawInput)\n    const premiseArray = rawInput.split(',')\n    dispatch(createTree(premiseArray))\n  }\n\n  const { tree, justifications, feedback } = currentState\n\n  useEffect(() => {\n    if (window.Carnap) {\n      checkTree(tree, justifications, checker)\n        .then(({ feedback }) => {\n          return dispatch(updateFeedback({ success: true, feedback }))\n        })\n        .catch(({ message }: Error) => {\n          return dispatch(\n            updateFeedback({ success: false, errorMessage: message })\n          )\n        })\n    }\n  }, [dispatch, justifications, tree, checker])\n  const classes = appJSS()\n  const feedbackClasses = feedbackJSS()\n  const topItemsRef = useRef<HTMLDivElement>(null)\n  return (\n    <main className={classes.AppBounder}>\n      <div className={classes.TopItemsBounder} ref={topItemsRef}>\n        {/* <PremisesSelector onChange={handleSubmitPremises} /> */}\n        <PremiseInput\n          premises={premises}\n          onSubmit={handleSubmitPremises}\n          setPremises={setPremises}\n        />\n        <span className=\"tree-buttons\">\n          <IconButton\n            aria-label=\"Undo\"\n            className=\"undo-button\"\n            onClick={() => {\n              dispatch({ type: 'UNDO' })\n            }}\n            disabled={!pastStates.length}\n          >\n            <Undo />\n          </IconButton>\n          <IconButton\n            aria-label=\"Redo\"\n            className=\"redo-button\"\n            onClick={() => {\n              dispatch({ type: 'REDO' })\n            }}\n            disabled={!futureStates.length}\n          >\n            <Redo />\n          </IconButton>\n        </span>\n      </div>\n      <div\n        className={`${classes.TreeBounder} ${\n          feedback.success ? '' : feedbackClasses.Incorrect\n        }`}\n      >\n        <ArcherContainer\n          arrowLength={0}\n          style={{ zIndex: 1 }}\n          svgContainerStyle={{ zIndex: -1 }}\n          strokeColor=\"black\"\n          noCurves={false}\n        >\n          <TruthTree currentState={currentState} dispatch={dispatch} />\n        </ArcherContainer>\n      </div>\n      <RudolfFeedback currentState={currentState} />\n    </main>\n  )\n}\n\nexport default Rudolf\n","import { Reducer } from 'react'\n\ntype TrackedChanges<S> = [S[], S, S[]]\n\nexport const makeUndoable = <S, A extends { type: string }>(\n  innerReducer: Reducer<S, A>,\n  initialState: S\n): [\n  Reducer<TrackedChanges<S>, A | { type: 'UNDO' } | { type: 'REDO' }>,\n  TrackedChanges<S>\n] => [\n  (\n    [past, present, future]: [S[], S, S[]],\n    action: A | { type: 'UNDO' } | { type: 'REDO' }\n  ) => {\n    switch (action.type) {\n      case 'UNDO':\n        const [previous, ...ancientHistory] = past\n        return [ancientHistory, previous, [present, ...future]]\n      case 'REDO':\n        const [next, ...distantFuture] = future\n        return [[present, ...past], next, distantFuture]\n      default:\n        return [[present, ...past], innerReducer(present, action as A), []]\n    }\n  },\n  [[], initialState, []],\n]\n","import * as serviceWorker from './serviceWorker'\nimport { createTrees, WidgetProps } from './lib'\n\nconst initialPremises = 'P->Q,P,~Q'\n\nconst trees: WidgetProps[] = [\n  {\n    elementId: 'problem-1.1',\n    initialPremises,\n    checker: Carnap.checkIchikawaJenkinsSLTableau,\n  },\n  { elementId: 'problem-1.2', initialPremises: '' },\n]\n\ncreateTrees(trees)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Rudolf from './components/Rudolf'\nimport { Checker } from './typings/Checker'\n\nexport type WidgetProps = {\n  elementId: string\n  initialPremises: string\n  checker?: Checker\n}\n\nexport const createTree = (\n  elementId: string,\n  initialPremises: string,\n  checker: Checker = Carnap.checkIchikawaJenkinsSLTableau\n) => {\n  ReactDOM.render(\n    React.createElement(Rudolf, { initialPremises, checker }),\n    document.getElementById(elementId)\n  )\n}\n\nexport const createTrees = (props: WidgetProps[]) => {\n  props.forEach(({ elementId, initialPremises, checker }) => {\n    createTree(elementId, initialPremises, checker)\n  })\n}\n"],"sourceRoot":""}