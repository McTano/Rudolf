{"version":3,"sources":["util/nodes.ts","RudolfReducer.ts","styles/JSONView_styles.ts","util/carnapAdapter.ts","components/JSONView.tsx","components/PremiseInput.tsx","components/PremisesSelector.tsx","styles/App_styles.ts","components/NodeMenu.tsx","styles/NodeView_styles.ts","components/StyledAutosizeInput.tsx","components/FormulaView.tsx","components/NodeView.tsx","components/TruthTree.tsx","util/helpers.ts","components/App.tsx","undoableReducer.ts","serviceWorker.ts","index.tsx"],"names":["makeNode","formulas","forest","nodeType","id","destructivelyAppendChildren","root","createNodes","length","forEach","child","console","warn","parsePremises","map","form","idx","makeTreeForm","value","row","resolved","isOpenLeaf","node","firstRow","makeEmptyFormulas","n","nextRow","arr","push","getNode","nodePath","split","char","Number","Error","convertIdToPath","currentNode","isFormulaNode","RudolfReducer","nodeId","formulaIndex","newValue","this","draftState","tree","nodeRow","justification","Object","assign","justifications","contradictoryRows","feedback","index","draftNode","premiseArray","formulaCount","rule","parentRow","parentId","ImmerReducer","initialState","errorMessage","rudolfReducer","createReducerFunction","createActionCreators","continueBranch","createTree","markContradiction","markFinished","reopenBranch","splitBranch","toggleResolved","updateContradiction","updateFeedback","updateFormula","updateJustification","jsonviewJSS","createUseStyles","Bounder","minWidth","position","bottom","display","flexDirection","zIndex","TextArea","overflow","fontSize","Toggle","backgroundColor","color","alignSelf","cursor","padding","convertToSequent","newFormulas","previousFormulas","concat","label","convertFormulas","validRow","rearrangeFormulas","filter","row1","row2","every","includes","sort","a","b","form1","form2","contradictionSequent","processFeedback","sequentRoot","feedbackRoot","feedbackMap","rec","sequent","feedbackNode","parentFeedback","extractMessage","childSequent","class","info","checkSequent","Promise","resolve","reject","Carnap","checkIchikawaJenkinsSLTableau","result","error","checkTree","forms","mainFormulaRow","findIndex","mainFormula","formulasWithoutMain","slice","newList","join","maybeRow","JSONView","dispatch","useEffect","window","then","catch","message","classes","useState","open","setOpen","className","onClick","TextareaAutosize","JSON","stringify","style","maxHeight","PremiseInput","onSubmit","premises","setPremises","event","preventDefault","type","name","aria-label","onChange","target","examples","PremisesSelector","currentTarget","key","appJSS","AppBounder","background","textAlign","width","height","alignItems","TopItemsBounder","TreeBounder","borderColor","borderStyle","Tree","left","transform","NodeMenu","anchorEl","close","onClose","formula","Menu","MenuItem","nodeviewJSS","NodeViewBaseContainer","gridTemplateColumns","placeItems","columnGap","rowGap","RowNumber","gridColumn","Justification","NodeView","StyledAutosizeInput","placeholder","inputStyle","FormulaView","contextMenu","setContextMenu","ref","useRef","marginBottom","onContextMenu","e","current","Check","props","feedbackInfo","feedbackClass","gridTemplateRows","gridRow","Tooltip","title","PopperProps","relations","targetId","targetAnchor","sourceAnchor","borderWidth","TruthTree","currentState","rows","range","start","stop","keys","rowString","marginRight","App","innerReducer","useReducer","action","past","present","future","previous","next","distantFuture","pastStates","futureStates","handleSubmitPremises","rawInput","topItemsRef","IconButton","disabled","Undo","Redo","top","offsetHeight","arrowLength","svgContainerStyle","strokeColor","noCurves","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f936d3eb.chunk.js","sourcesContent":["import {\n  ContradictionNode,\n  FinishedNode,\n  FormulaNode,\n  NodeGenerator,\n  OpenLeafNode,\n  TreeForm,\n  TreeNode,\n} from '../typings/TreeState'\nimport { isNonEmptyArray } from './util'\n\nexport const makeNode = ({\n  formulas = [],\n  forest = [],\n  id,\n}: Partial<FormulaNode> & {\n  id: string\n}): FormulaNode => {\n  return {\n    nodeType: 'formulas',\n    formulas,\n    forest,\n    id,\n  }\n}\n\nexport const makeContradictionNode = (parentId: string): ContradictionNode => ({\n  nodeType: 'contradiction',\n  formulas: [],\n  contradictoryRows: '',\n  id: `${parentId}0`,\n})\n\nexport const makeFinishedNode = (parentId: string): FinishedNode => ({\n  nodeType: 'finished',\n  formulas: [],\n  id: `${parentId}0`,\n})\n\n/**\n *\n * @param root The root of a subTree\n * @param createNodes function that creates new node objects\n */\nexport const destructivelyAppendChildren = (\n  root: TreeNode,\n  createNodes: NodeGenerator\n): void => {\n  if (root.nodeType === 'contradiction') {\n    return\n  } else if (root.nodeType === 'finished') {\n    // TODO: Special Handling for FinishedNodes?\n    console.warn(\"shouldn't try to append to finished branch\")\n    return\n  } else if (root.forest.length === 0) {\n    root.forest = createNodes(root.id)\n  } else {\n    root.forest.forEach((child) =>\n      destructivelyAppendChildren(child, createNodes)\n    )\n  }\n}\n\n/**\n *\n * @param formulas an array of of formulas.\n */\nexport const parsePremises = (formulas: string[]): FormulaNode => {\n  return makeNode({\n    formulas: formulas.map((form, idx) => makeTreeForm(form, idx + 1)),\n    forest: [],\n    id: '',\n  })\n}\n\nconst makeTreeForm = (value = '', row: number): TreeForm => ({\n  value,\n  resolved: false,\n  row,\n})\n\nexport const isOpenLeaf = (node: TreeNode | null): node is OpenLeafNode =>\n  node != null && node.nodeType === 'formulas' && node.forest.length === 0\n\nexport const lastRow = (node: FormulaNode) =>\n  firstRow(node) + node.formulas.length\n\nexport const firstRow = (node: FormulaNode) => node.formulas[0].row\n\nexport const makeEmptyFormulas = (n: number, nextRow: number): TreeForm[] => {\n  const arr = []\n  while (n-- > 0) {\n    arr.push(makeTreeForm('', nextRow++))\n  }\n  return arr\n}\n\nexport const convertIdToPath = (id: string): (0 | 1)[] =>\n  id.split('').map((char: string) => {\n    if (char === '0' || char === '1') {\n      return Number(char) as 0 | 1\n    } else {\n      throw new Error(`invalid character in node id: ${char} in ${id}`)\n    }\n  })\n\nexport const getNode = (root: FormulaNode, id: string): TreeNode => {\n  const nodePath: (0 | 1)[] = convertIdToPath(id)\n  let currentNode: TreeNode = root\n  for (const idx of nodePath) {\n    if (currentNode.nodeType !== 'formulas') {\n      throw new Error('Failed to get node path')\n    }\n    currentNode = currentNode.forest[idx]\n  }\n  return currentNode\n}\n\nexport const isNonLeafNode = (\n  node: TreeNode\n): node is FormulaNode & { forest: FormulaNode[] } =>\n  isFormulaNode(node) &&\n  isNonEmptyArray(node.forest) &&\n  node.forest[0]?.nodeType === 'formulas'\n\nexport const isFormulaNode = (node: TreeNode): node is FormulaNode =>\n  node.nodeType === 'formulas'\n","import {\n  Actions,\n  createActionCreators,\n  createReducerFunction,\n  ImmerReducer,\n} from 'immer-reducer'\nimport { Dispatch } from 'react'\n\nimport { CheckerFeedback } from './typings/Checker'\nimport {\n  FormulaNode,\n  Justification,\n  JustificationMap,\n} from './typings/TreeState'\nimport {\n  destructivelyAppendChildren,\n  getNode,\n  makeContradictionNode,\n  makeEmptyFormulas,\n  makeFinishedNode,\n  makeNode,\n  parsePremises,\n} from './util/nodes'\n\nexport type RudolfStore = {\n  tree: FormulaNode\n  nextRow: number\n  justifications: JustificationMap\n  feedback: CheckerFeedback\n}\n\nexport class RudolfReducer extends ImmerReducer<RudolfStore> {\n  updateFormula(nodeId: string, formulaIndex: number, newValue: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    draftNode.formulas[formulaIndex].value = newValue\n  }\n\n  updateJustification(nodeRow: number, justification: Partial<Justification>) {\n    Object.assign(this.draftState.justifications[nodeRow], justification)\n  }\n\n  updateContradiction(id: string, contradictoryRows: string) {\n    Object.assign(getNode(this.draftState.tree, id), { contradictoryRows })\n  }\n\n  updateFeedback(feedback: CheckerFeedback) {\n    this.draftState.feedback = feedback\n  }\n\n  toggleResolved(nodeId: string, index: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    draftNode.formulas[index].resolved = !draftNode.formulas[index].resolved\n  }\n\n  createTree(premiseArray: string[]) {\n    this.draftState.tree = parsePremises(premiseArray)\n    this.draftState.nextRow = premiseArray.length + 1\n    this.draftState.justifications = {}\n  }\n\n  continueBranch(nodeId: string, formulaCount: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    destructivelyAppendChildren(draftNode, (id) => [\n      makeNode({\n        id: `${id}0`,\n        formulas: makeEmptyFormulas(formulaCount, this.draftState.nextRow),\n      }),\n    ])\n\n    this.draftState.justifications[this.draftState.nextRow] = {\n      rule: '',\n      parentRow: '',\n    }\n    this.draftState.nextRow += formulaCount\n  }\n\n  splitBranch(nodeId: string, formulaCount: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    destructivelyAppendChildren(draftNode, (id) => {\n      const formulas = makeEmptyFormulas(formulaCount, this.draftState.nextRow)\n      return [\n        makeNode({\n          id: `${id}0`,\n          formulas,\n        }),\n        makeNode({\n          id: `${id}1`,\n          formulas,\n        }),\n      ]\n    })\n    this.draftState.justifications[this.draftState.nextRow] = {\n      rule: '',\n      parentRow: '',\n    }\n    this.draftState.nextRow += formulaCount\n  }\n\n  markContradiction(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = [makeContradictionNode(draftNode.id)]\n  }\n\n  markFinished(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = [makeFinishedNode(nodeId)]\n  }\n\n  reopenBranch(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = []\n  }\n}\n\nexport const initialPremises = 'P->Q,P,~Q'\nconst premiseArray = initialPremises.split(',')\n\nexport const initialState: RudolfStore = {\n  tree: parsePremises(premiseArray),\n  nextRow: premiseArray.length + 1,\n  justifications: {},\n  feedback: { errorMessage: 'Nothing yet.' },\n}\n\nexport const rudolfReducer = createReducerFunction(RudolfReducer)\nexport const {\n  continueBranch,\n  createTree,\n  markContradiction,\n  markFinished,\n  reopenBranch,\n  splitBranch,\n  toggleResolved,\n  updateContradiction,\n  updateFeedback,\n  updateFormula,\n  updateJustification,\n} = createActionCreators(RudolfReducer)\nexport type RudolfAction = Actions<typeof RudolfReducer>\nexport type CustomDispatch = Dispatch<RudolfAction>\n","import { createUseStyles } from 'react-jss'\n\nconst jsonviewJSS = createUseStyles({\n  Bounder: {\n    minWidth: '100%',\n    position: 'fixed',\n    bottom: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    zIndex: 10,\n  },\n\n  TextArea: {\n    overflow: 'hidden scroll',\n    fontSize: '16px',\n  },\n\n  Toggle: {\n    backgroundColor: 'black',\n    color: 'white',\n    fontSize: '13px',\n    alignSelf: 'flex-end',\n    '&:hover': {\n      cursor: 'pointer',\n    },\n    padding: '2px 10px',\n  },\n})\n\nexport default jsonviewJSS\n","import {\n  FeedbackMap,\n  FeedbackNode,\n  SequentNode,\n  FeedbackMessage,\n  CheckerFeedback,\n} from '../typings/Checker'\nimport { FormulaNode, JustificationMap, TreeForm } from '../typings/TreeState'\nimport { firstRow } from './nodes'\n\nexport const convertToSequent = (\n  { formulas: newFormulas, forest, id }: FormulaNode,\n  justifications: JustificationMap,\n  previousFormulas: TreeForm[] = []\n): SequentNode => {\n  const formulas = previousFormulas.concat(newFormulas)\n  if (forest.length === 0) {\n    return { label: convertFormulas(formulas), rule: '', forest: [], id }\n  } else {\n    const [child] = forest\n    if (child.nodeType === 'formulas') {\n      const justification = justifications[firstRow(child)]\n      const { rule } = justification\n      const parentRow = Number(justification.parentRow)\n      if (!validRow(parentRow)) {\n        throw new Error(\n          `Cited row must be a positive integer. Got \"${parentRow}\"`\n        )\n      }\n      if (parentRow >= firstRow(child)) {\n        throw new Error(\n          `Row cited (${parentRow}) must be less than current row (${firstRow(\n            child\n          )}).`\n        )\n      }\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        forest: [\n          {\n            label: rearrangeFormulas(formulas, parentRow),\n            rule,\n            id,\n            forest: forest.map((node) =>\n              convertToSequent(\n                node as FormulaNode,\n                justifications,\n                formulas.filter((form) => !(form.row === parentRow))\n              )\n            ),\n          },\n        ],\n      }\n    } else if (child.nodeType === 'contradiction') {\n      // We expect parentRow to be \"<number>,<number>\"\n      const [row1, row2] = child.contradictoryRows.split(',').map(Number)\n      if (![row1, row2].every(validRow)) {\n        throw new Error(\n          `Contradiction must cite 2 rows, separated by a comma. Got \"${child.contradictoryRows}\"`\n        )\n      }\n      const [form1, form2] = formulas\n        .filter((form) => [row1, row2].includes(form.row))\n        // this sort is a hack to avoid parsing for negation symbol, which may vary\n        .sort((a, b) => b.value.length - a.value.length)\n      if (!(form1 && form2)) {\n        throw new Error('Contradiction cites non-existent row')\n      }\n      const contradictionSequent: string = convertFormulas([\n        form1,\n        ...formulas.filter((form) => ![row1, row2].includes(form.row)),\n        form2,\n      ])\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        id,\n        forest: [\n          {\n            label: contradictionSequent,\n            rule: 'Ax',\n            id: child.id,\n            forest: [{ label: '', rule: '', forest: [] }],\n          },\n        ],\n      }\n    } else if (child.nodeType === 'finished') {\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        id,\n        forest: [\n          {\n            label: convertFormulas(formulas),\n            rule: 'Lit',\n            id: child.id,\n            forest: [\n              {\n                label: '',\n                rule: '',\n                forest: [],\n              },\n            ],\n          },\n        ],\n      }\n    } else {\n      throw new Error('this was supposed to be exhaustive')\n    }\n  }\n}\n\nexport const processFeedback = (\n  sequentRoot: SequentNode,\n  feedbackRoot: FeedbackNode\n): FeedbackMap => {\n  const feedbackMap: FeedbackMap = {}\n  if (sequentRoot.forest.length) {\n    // close over (mutable) feedback map for recursive calls\n    const rec = (\n      sequent: SequentNode,\n      feedbackNode: FeedbackNode,\n      parentFeedback: FeedbackMessage\n    ): void => {\n      // detect dummy nodes inserted to pad tree\n      if (typeof sequent.id === 'string') {\n        if (sequent.rule === 'Ax' || sequent.rule === 'Lit') {\n          feedbackMap[sequent.id] = extractMessage(feedbackNode)\n          return\n        } else {\n          feedbackMap[sequent.id] = parentFeedback\n          sequent.forest.forEach((childSequent, idx) => {\n            rec(\n              childSequent,\n              feedbackNode.forest[idx],\n              extractMessage(feedbackNode)\n            )\n          })\n        }\n      } else {\n        sequent.forest.forEach((childSequent, idx) => {\n          rec(childSequent, feedbackNode.forest[idx], parentFeedback)\n        })\n      }\n    }\n    // recursive call\n    rec(sequentRoot, feedbackRoot, {\n      class: 'correct',\n      info: 'Assumptions',\n    })\n  }\n  return feedbackMap\n}\n\n// Promisifies the checker\nconst checkSequent = async (sequent: SequentNode): Promise<FeedbackNode> => {\n  return new Promise((resolve, reject) => {\n    try {\n      Carnap.checkIchikawaJenkinsSLTableau(sequent, (result: FeedbackNode) => {\n        resolve(result)\n      })\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\nexport const checkTree = async (\n  tree: any,\n  justifications: JustificationMap\n): Promise<CheckerFeedback> => {\n  const sequent = convertToSequent(tree, justifications)\n  const feedback: FeedbackNode = await checkSequent(sequent)\n  return { sequent, feedback: processFeedback(sequent, feedback) }\n}\n\nconst rearrangeFormulas = (\n  forms: TreeForm[],\n  mainFormulaRow: number\n): string => {\n  const idx = forms.findIndex((form) => form.row === mainFormulaRow)\n  const mainFormula = forms[idx]\n  const formulasWithoutMain = forms.slice(0, idx).concat(forms.slice(idx + 1))\n  const newList = [...formulasWithoutMain, mainFormula]\n  return convertFormulas(newList)\n}\n\nconst convertFormulas = (forms: TreeForm[]) =>\n  forms\n    .map(({ value }) => value)\n    .join(',')\n    .concat(':|-:')\n\nconst validRow = (maybeRow: number): boolean => maybeRow > 0\n\n// returns the non-recursive properties of the FeedbackNode\nconst extractMessage = ({\n  forest,\n  ...feedbackMessage\n}: FeedbackNode): FeedbackMessage => feedbackMessage\n","import { TextareaAutosize } from '@material-ui/core'\nimport React, { FC, useEffect, useState } from 'react'\n\nimport { CustomDispatch, RudolfStore, updateFeedback } from '../RudolfReducer'\nimport jsonviewJSS from '../styles/JSONView_styles'\nimport { checkTree } from '../util/carnapAdapter'\n\nexport const JSONView: FC<RudolfStore & { dispatch: CustomDispatch }> = ({\n  tree,\n  justifications,\n  feedback,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (window.Carnap) {\n      checkTree(tree, justifications)\n        .then(({ sequent, feedback }) => {\n          return dispatch(updateFeedback({ feedback, sequent }))\n        })\n        .catch(({ message }: Error) => {\n          return dispatch(updateFeedback({ errorMessage: message }))\n        })\n    }\n  }, [dispatch, justifications, tree])\n  const classes = jsonviewJSS()\n  const [open, setOpen] = useState(false)\n  return (\n    <div className={classes.Bounder}>\n      <div\n        className={classes.Toggle}\n        onClick={() => {\n          setOpen(!open)\n        }}\n      >\n        {open ? 'close' : 'open'}\n      </div>\n      <TextareaAutosize\n        className={classes.TextArea}\n        value={JSON.stringify({ tree, justifications, feedback })}\n        style={{\n          maxHeight: open ? '50vh' : '0vh',\n        }}\n      />\n    </div>\n  )\n}\n","import React, { FormEventHandler } from 'react'\nimport AutosizeInput from 'react-input-autosize'\n\ntype Props = {\n  onSubmit: (premises: string) => void\n  premises: string\n  setPremises: (premises: string) => void\n}\n\nconst PremiseInput: React.FC<Props> = ({ onSubmit, premises, setPremises }) => {\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault()\n    onSubmit(premises)\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <AutosizeInput\n        type=\"text\"\n        name=\"premises\"\n        aria-label=\"Enter Premises\"\n        value={premises}\n        onChange={(event) => setPremises(event.target.value)}\n      />\n      <button className=\"submit-premises\" type=\"submit\">\n        Declare Premises\n      </button>\n    </form>\n  )\n}\n\nexport default PremiseInput\n","import React, { ChangeEventHandler } from 'react'\n\ntype Props = {\n  onChange: (premises: string) => void\n}\n\nconst examples = [\n  ['P->Q,P,~Q', 'Modus Ponens'],\n  ['~(~(P\\\\/Q)<->(~P/\\\\~Q))', \"De Morgen's Law\"],\n]\n\nconst PremisesSelector: React.FC<Props> = ({ onChange }) => {\n  const handleSelect: ChangeEventHandler<HTMLSelectElement> = (event) => {\n    const premises: string = event.currentTarget.value\n    onChange(premises)\n  }\n\n  return (\n    <label>\n      Example premise:\n      <select onChange={handleSelect}>\n        {examples.map(([value, name]) => (\n          <option value={value} key={value}>\n            {name}\n          </option>\n        ))}\n      </select>\n    </label>\n  )\n}\n\nexport default PremisesSelector\n","import { createUseStyles } from 'react-jss'\n\nconst appJSS = createUseStyles({\n  AppBounder: {\n    background: '#ffffff',\n    textAlign: 'center',\n    color: 'black',\n    fontSize: 'calc(10px + 2vmin)',\n    width: '100vw',\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n\n  TopItemsBounder: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n\n  TreeBounder: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '80vw',\n    height: '70vh',\n    position: 'absolute',\n    borderColor: 'black',\n    borderStyle: 'solid',\n    overflow: 'scroll',\n    '&::-webkit-scrollbar': {\n      height: '6px',\n      width: '6px',\n    },\n    '&::-webkit-scrollbar-thumb': {\n      backgroundColor: 'black',\n    },\n  },\n\n  Tree: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    position: 'absolute',\n    left: '50%',\n    transform: 'translate(max(-50%, -40vw), 0px)',\n  },\n})\n\nexport default appJSS\n","import { Menu, MenuItem } from '@material-ui/core'\nimport React, { FC } from 'react'\n\nimport {\n  CustomDispatch,\n  toggleResolved,\n  continueBranch,\n  splitBranch,\n  markContradiction,\n  markFinished,\n  reopenBranch,\n} from '../RudolfReducer'\nimport { TreeNode } from '../typings/TreeState'\nimport { isOpenLeaf } from '../util/nodes'\n\ntype Props = {\n  onClose: () => void\n  open: boolean\n  index: number\n  node: TreeNode\n  anchorEl: Element\n  dispatch: CustomDispatch\n}\n\n/**\n * @TODO make context menu work for each of\n * - Formula Node:\n *   - branch commands\n *\n * - Contradiction/Finished node:\n *   - Reopen.\n * - Formula:\n *   - branch commands\n *   - (un)resolve\n *   - close branch.\n */\n\nexport const NodeMenu: FC<Props> = ({\n  open,\n  dispatch,\n  index,\n  anchorEl,\n  onClose: close,\n  node,\n}) => {\n  const formula = node.formulas[index]\n  return (\n    <Menu open={open} anchorEl={anchorEl} onClose={close}>\n      <MenuItem\n        onClick={() => {\n          dispatch(continueBranch(node.id, 1))\n          close()\n        }}\n      >\n        Continue Branch w/ 1 formula\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(splitBranch(node.id, 1))\n          close()\n        }}\n      >\n        Split Branch w/ 1 formula\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(continueBranch(node.id, 2))\n          close()\n        }}\n      >\n        Continue Branch w/ 2 formulas\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(splitBranch(node.id, 2))\n          close()\n        }}\n      >\n        Split Branch w/ 2 formulas\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(toggleResolved(node.id, index))\n          close()\n        }}\n      >\n        Mark as {formula.resolved ? 'Un' : ''}Resolved\n      </MenuItem>\n      {isOpenLeaf(node) && (\n        <MenuItem\n          onClick={() => {\n            dispatch(markContradiction(node.id))\n            close()\n          }}\n        >\n          Close Branch With Contradiction\n        </MenuItem>\n      )}\n      {isOpenLeaf(node) && (\n        <MenuItem\n          onClick={() => {\n            dispatch(markFinished(node.id))\n            close()\n          }}\n        >\n          Mark Branch Finished\n        </MenuItem>\n      )}\n      {node.nodeType === 'contradiction' && (\n        <MenuItem\n          onClick={() => {\n            dispatch(reopenBranch(node.id))\n            close()\n          }}\n        >\n          Reopen Branch\n        </MenuItem>\n      )}\n    </Menu>\n  )\n}\n","import { createUseStyles } from 'react-jss'\n\nexport const rowHeight = '1.5em'\nexport const rowGap = '3vmin'\nconst columnGap = '3vmin'\n\nconst nodeviewJSS = createUseStyles({\n  NodeViewBaseContainer: {\n    display: 'grid',\n    padding: '0.2em',\n    gridTemplateColumns:\n      '[rowNumber] auto [nodeView] auto [justification] auto',\n    placeItems: 'center',\n    columnGap,\n    rowGap,\n  },\n\n  RowNumber: {\n    gridColumn: 'rowNumber',\n  },\n\n  Justification: {\n    gridColumn: 'justification',\n    display: 'flex',\n    alignSelf: 'start',\n  },\n\n  NodeView: {\n    display: 'grid',\n    textAlign: 'center',\n    columnGap,\n    rowGap,\n  },\n})\n\nexport default nodeviewJSS\n","import React, { ChangeEvent } from 'react'\nimport AutosizeInput from 'react-input-autosize'\nimport CSS from 'csstype'\n\ntype Props = {\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void\n  value: string\n  placeholder: string\n  style?: CSS.Properties\n}\n\nfunction StyledAutosizeInput({ onChange, value, placeholder, style }: Props) {\n  return (\n    <AutosizeInput\n      style={style}\n      inputStyle={{\n        padding: '0vmin .5vmin',\n        backgroundColor: 'transparent',\n        borderStyle: 'none',\n      }}\n      onChange={onChange}\n      value={value}\n      placeholder={placeholder}\n    />\n  )\n}\n\nexport default StyledAutosizeInput\n","import React, { FC, useState, useRef, Ref } from 'react'\nimport { Check } from '@material-ui/icons'\nimport { CustomDispatch, updateFormula } from '../RudolfReducer'\nimport { NodeMenu } from './NodeMenu'\nimport { FormulaNode } from '../typings/TreeState'\nimport { rowHeight, rowGap } from '../styles/NodeView_styles'\nimport StyledAutosizeInput from './StyledAutosizeInput'\n\ninterface Props {\n  row: number\n  value: string\n  resolved: boolean\n  node: FormulaNode\n  index: number\n  dispatch: CustomDispatch\n}\n\nconst FormulaView: FC<Props> = ({ index, dispatch, node }) => {\n  const formula = node.formulas[index]\n  const { value, resolved } = formula\n  const [contextMenu, setContextMenu] = useState(false) // Convert to reducer action/field w/ ref, node, optional index.\n  const ref: Ref<HTMLDivElement> = useRef(null)\n  return (\n    <div\n      style={{\n        height: rowHeight,\n        marginBottom: rowGap,\n      }}\n      ref={ref}\n      onContextMenu={(e) => {\n        e.preventDefault()\n        setContextMenu(true)\n      }}\n    >\n      <StyledAutosizeInput\n        onChange={(event) => {\n          dispatch(updateFormula(node.id, index, event.currentTarget.value))\n        }}\n        value={value}\n        placeholder=\"formula\"\n      />\n      <NodeMenu\n        open={contextMenu}\n        onClose={() => setContextMenu(false)}\n        dispatch={dispatch}\n        anchorEl={ref.current as HTMLDivElement}\n        index={index}\n        node={node}\n      />\n      {resolved ? <Check /> : ''}\n    </div>\n  )\n}\n\nexport default FormulaView\n","/* eslint-disable react/jsx-no-undef */\nimport { Tooltip } from '@material-ui/core'\nimport React, { FC } from 'react'\nimport { ArcherElement } from 'react-archer'\n\nimport { CustomDispatch, updateContradiction } from '../RudolfReducer'\nimport { FeedbackMap } from '../typings/Checker'\nimport { JustificationMap, TreeNode } from '../typings/TreeState'\nimport { firstRow, isFormulaNode } from '../util/nodes'\nimport FormulaView from './FormulaView'\nimport nodeviewJSS, { rowHeight } from '../styles/NodeView_styles'\nimport StyledAutosizeInput from './StyledAutosizeInput'\n\ntype Props = {\n  node: TreeNode\n  dispatch: CustomDispatch\n  justifications: JustificationMap\n  feedbackMap?: FeedbackMap\n  nextRow: number\n}\n\nconst NodeView: FC<Props> = ({\n  node,\n  dispatch,\n  justifications,\n  feedbackMap,\n  nextRow,\n  ...props\n}) => {\n  const classes = nodeviewJSS()\n  let feedbackInfo = ''\n  let feedbackClass = ''\n  if (feedbackMap) {\n    const feedback = feedbackMap[node.id] ?? ''\n    feedbackInfo = feedback.info ?? ''\n    feedbackClass = feedback.class === 'correct' ? 'correct' : 'incorrect'\n  }\n  if (isFormulaNode(node)) {\n    const { id, formulas, forest } = node\n\n    return (\n      <div\n        className={classes.NodeView}\n        style={{\n          gridTemplateRows: `repeat(${nextRow - firstRow(node)}, ${rowHeight})`,\n          gridTemplateColumns: `repeat(${forest.length}, auto)`,\n        }}\n      >\n        <div\n          style={{\n            gridRow: '1',\n            gridColumn: `1 / span ${forest.length}`,\n          }}\n        >\n          <Tooltip\n            title={feedbackInfo}\n            PopperProps={{ style: { fontSize: 16 } }}\n          >\n            <ArcherElement\n              id={id}\n              relations={forest.map((child) => {\n                return {\n                  targetId: child.id,\n                  targetAnchor: 'top',\n                  sourceAnchor: 'bottom',\n                }\n              })}\n            >\n              <div\n                // TODO: allow context menu on nodes?\n                // onContextMenu={handleContextMenu}\n                style={{\n                  borderStyle: feedbackMap ? 'solid' : 'none',\n                  borderColor: feedbackClass === 'correct' ? 'green' : 'red',\n                  borderWidth: '1.5px',\n                }}\n                {...props}\n              >\n                {formulas.map((form, index) => {\n                  return (\n                    <FormulaView\n                      key={`${form}-${index}`}\n                      node={node}\n                      index={index}\n                      dispatch={dispatch}\n                      {...form}\n                    />\n                  )\n                })}\n              </div>\n            </ArcherElement>\n          </Tooltip>\n        </div>\n\n        {forest.map((child, index) => {\n          return (\n            <div\n              key={child.id}\n              style={{\n                gridColumn: `${index} / span 1`,\n                gridRow: child.formulas[0]\n                  ? `${child.formulas[0].row - firstRow(node) + 1}`\n                  : 2,\n              }}\n            >\n              <NodeView\n                {...{\n                  node: child,\n                  dispatch,\n                  justifications,\n                  nextRow,\n                  feedbackMap,\n                }}\n              />\n            </div>\n          )\n        })}\n      </div>\n    )\n  } else if (node.nodeType === 'contradiction') {\n    return (\n      <Tooltip title={feedbackInfo} PopperProps={{ style: { fontSize: 16 } }}>\n        <ArcherElement id={node.id}>\n          <div\n            className={`closed-branch-marker node ${feedbackClass}`}\n            {...props}\n          >\n            X\n            <StyledAutosizeInput\n              onChange={({ currentTarget: { value } }) =>\n                dispatch(updateContradiction(node.id, value))\n              }\n              value={node.contradictoryRows}\n              placeholder=\"rows\"\n            />\n          </div>\n        </ArcherElement>\n      </Tooltip>\n    )\n  } else if (node.nodeType === 'finished') {\n    return (\n      <Tooltip title={feedbackInfo} PopperProps={{ style: { fontSize: 16 } }}>\n        <ArcherElement id={node.id}>\n          <div className={`finished-branch-marker ${feedbackClass}`} {...props}>\n            O{' '}\n          </div>\n        </ArcherElement>\n      </Tooltip>\n    )\n  } else {\n    throw new Error(\n      `Invariant violation: Invalid nodeType on node: ${JSON.stringify(node)}`\n    )\n  }\n}\n\nexport default NodeView\n","import React from 'react'\nimport NodeView from './NodeView'\nimport {\n  RudolfStore,\n  CustomDispatch,\n  updateJustification,\n} from '../RudolfReducer'\nimport nodeviewJSS, { rowHeight } from '../styles/NodeView_styles'\nimport { range } from '../util/helpers'\nimport StyledAutosizeInput from './StyledAutosizeInput'\n\ntype Props = {\n  currentState: RudolfStore\n  dispatch: CustomDispatch\n}\n\nconst TruthTree = ({ currentState, dispatch }: Props) => {\n  const classes = nodeviewJSS()\n  const { nextRow, tree, justifications, feedback } = currentState\n  const rows = range(1, nextRow)\n  return (\n    <div\n      className={classes.NodeViewBaseContainer}\n      style={{\n        gridTemplateRows: `repeat(${nextRow - 1}, ${rowHeight})`,\n      }}\n    >\n      {rows.map((row) => {\n        return (\n          <div className={classes.RowNumber} key={row} style={{ gridRow: row }}>\n            {`${row}.`}\n          </div>\n        )\n      })}\n      <div\n        style={{\n          gridColumn: 'nodeView',\n          gridRow: `1 / span ${rows.length}`,\n        }}\n      >\n        <NodeView\n          node={tree}\n          dispatch={dispatch}\n          justifications={justifications}\n          feedbackMap={feedback.feedback}\n          nextRow={nextRow}\n        />\n      </div>\n      {Object.keys(justifications).map((rowString) => {\n        const row = Number(rowString)\n        const { parentRow, rule } = justifications[row]\n        return (\n          <div\n            className={classes.Justification}\n            key={row}\n            style={{ gridRow: row }}\n          >\n            <StyledAutosizeInput\n              style={{ marginRight: '.5vmin' }}\n              onChange={({ currentTarget: { value: parentRow } }) =>\n                dispatch(updateJustification(row, { parentRow }))\n              }\n              value={parentRow}\n              placeholder=\"row\"\n            />\n            <StyledAutosizeInput\n              onChange={({ currentTarget: { value: rule } }) =>\n                dispatch(updateJustification(row, { rule }))\n              }\n              value={rule}\n              placeholder=\"rule\"\n            />\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default TruthTree\n","export const isEmptyArray = <T>(\n  maybeArray: Array<T> | string\n): maybeArray is [] => Array.isArray(maybeArray) && maybeArray.length === 0\n\nexport const lastEl = <T>(arr: T[]) => arr[arr.length - 1]\n\n/**\n * @param start start of array (inclusive)\n * @param stop end of array (exclusive)\n * @returns Array of integers from start to stop.\n * if start >= stop, returns empty array\n */\nexport const range = (start: number, stop: number): number[] => {\n  if (start < stop) {\n    return [start, ...range(start + 1, stop)]\n  } else {\n    return []\n  }\n}\n","import { IconButton } from '@material-ui/core'\nimport { Redo, Undo } from '@material-ui/icons'\nimport React, { useReducer, useState, useRef } from 'react'\n\nimport {\n  createTree,\n  initialPremises,\n  initialState,\n  rudolfReducer,\n} from '../RudolfReducer'\nimport { makeUndoable } from '../undoableReducer'\nimport { JSONView } from './JSONView'\nimport PremiseInput from './PremiseInput'\nimport PremisesSelector from './PremisesSelector'\nimport { ArcherContainer } from 'react-archer'\nimport appJSS from '../styles/App_styles'\nimport TruthTree from './TruthTree'\n\nconst App: React.FC = (): JSX.Element => {\n  const [premises, setPremises] = useState(initialPremises)\n  const [[pastStates, currentState, futureStates], dispatch] = useReducer(\n    ...makeUndoable(rudolfReducer, initialState)\n  )\n\n  const handleSubmitPremises = (rawInput: string) => {\n    setPremises(rawInput)\n    const premiseArray = rawInput.split(',')\n    dispatch(createTree(premiseArray))\n  }\n  const classes = appJSS()\n  const topItemsRef = useRef<HTMLDivElement>(null)\n  return (\n    <main className={classes.AppBounder}>\n      <div className={classes.TopItemsBounder} ref={topItemsRef}>\n        <PremisesSelector onChange={handleSubmitPremises} />\n        <PremiseInput\n          premises={premises}\n          onSubmit={handleSubmitPremises}\n          setPremises={setPremises}\n        />\n        <span className=\"tree-buttons\">\n          <IconButton\n            aria-label=\"Undo\"\n            className=\"undo-button\"\n            onClick={() => {\n              dispatch({ type: 'UNDO' })\n            }}\n            disabled={!pastStates.length}\n          >\n            <Undo />\n          </IconButton>\n          <IconButton\n            aria-label=\"Redo\"\n            className=\"redo-button\"\n            onClick={() => {\n              dispatch({ type: 'REDO' })\n            }}\n            disabled={!futureStates.length}\n          >\n            <Redo />\n          </IconButton>\n        </span>\n      </div>\n      <div\n        className={classes.TreeBounder}\n        style={{\n          top: topItemsRef.current?.offsetHeight,\n          position: topItemsRef.current ? 'absolute' : 'static',\n        }}\n      >\n        <div className={classes.Tree}>\n          <ArcherContainer\n            arrowLength={0}\n            style={{ zIndex: 1 }}\n            svgContainerStyle={{ zIndex: -1 }}\n            strokeColor=\"black\"\n            noCurves={false}\n          >\n            <TruthTree currentState={currentState} dispatch={dispatch} />\n          </ArcherContainer>\n        </div>\n      </div>\n      <JSONView {...{ ...currentState, dispatch }} />\n    </main>\n  )\n}\n\nexport default App\n","import { Reducer } from 'react'\n\ntype TrackedChanges<S> = [S[], S, S[]]\n\nexport const makeUndoable = <S, A extends { type: string }>(\n  innerReducer: Reducer<S, A>,\n  initialState: S\n): [\n  Reducer<TrackedChanges<S>, A | { type: 'UNDO' } | { type: 'REDO' }>,\n  TrackedChanges<S>\n] => [\n  (\n    [past, present, future]: [S[], S, S[]],\n    action: A | { type: 'UNDO' } | { type: 'REDO' }\n  ) => {\n    switch (action.type) {\n      case 'UNDO':\n        const [previous, ...ancientHistory] = past\n        return [ancientHistory, previous, [present, ...future]]\n      case 'REDO':\n        const [next, ...distantFuture] = future\n        return [[present, ...past], next, distantFuture]\n      default:\n        return [[present, ...past], innerReducer(present, action as A), []]\n    }\n  },\n  [[], initialState, []],\n]\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport './styles/_main.scss'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}