{"version":3,"sources":["util/nodes.ts","RudolfReducer.ts","components/JSONView_styles.ts","util/carnapAdapter.ts","components/JSONView.tsx","components/NodeMenu.tsx","components/FormulaView.tsx","components/Spacers.tsx","components/NodeView.tsx","components/PremiseInput.tsx","components/PremisesSelector.tsx","components/App.tsx","undoableReducer.ts","serviceWorker.ts","index.tsx"],"names":["makeNode","formulas","forest","nodeType","id","destructivelyAppendChildren","root","createNodes","length","forEach","child","console","warn","parsePremises","map","form","idx","makeTreeForm","value","row","resolved","isOpenLeaf","node","lastRow","firstRow","makeEmptyFormulas","n","nextRow","arr","push","getNode","nodePath","split","char","Number","Error","convertIdToPath","currentNode","isFormulaNode","RudolfReducer","nodeId","formulaIndex","newValue","this","draftState","tree","nodeRow","justification","Object","assign","justifications","contradictoryRows","feedback","index","draftNode","premiseArray","1","rule","parentRow","formulaCount","parentId","windowSize","window","innerHeight","innerWidth","ImmerReducer","initialState","errorMessage","rudolfReducer","createReducerFunction","createActionCreators","continueBranch","createTree","markContradiction","markFinished","reopenBranch","splitBranch","toggleResolved","updateContradiction","updateFeedback","updateFormula","updateJustification","updateWindowSize","useJSS","createUseStyles","Bounder","minWidth","position","bottom","display","flexDirection","zIndex","TextArea","overflow","fontSize","Toggle","backgroundColor","color","alignSelf","cursor","padding","convertToSequent","newFormulas","previousFormulas","concat","label","convertFormulas","validRow","rearrangeFormulas","filter","row1","row2","every","includes","sort","a","b","form1","form2","contradictionSequent","processFeedback","sequentRoot","feedbackRoot","feedbackMap","rec","sequent","feedbackNode","parentFeedback","extractMessage","childSequent","class","info","checkSequent","Promise","resolve","reject","Carnap","checkIchikawaJenkinsSLTableau","result","error","checkTree","forms","mainFormulaRow","findIndex","mainFormula","formulasWithoutMain","slice","newList","join","maybeRow","JSONView","dispatch","useEffect","then","catch","message","classes","useState","open","setOpen","className","onClick","TextareaAutosize","JSON","stringify","style","maxHeight","NodeMenu","anchorEl","close","onClose","formula","Menu","MenuItem","FormulaView","contextMenu","setContextMenu","ref","useRef","onContextMenu","e","preventDefault","onChange","event","currentTarget","placeholder","current","Check","Spacers","diff","spacers","i","key","NodeView","feedbackInfo","feedbackClass","props","undefined","Tooltip","title","PopperProps","from","to","borderColor","fromAnchor","toAnchor","delay","PremiseInput","onSubmit","premises","setPremises","type","name","aria-label","target","examples","PremisesSelector","App","innerReducer","useReducer","action","past","present","future","previous","next","distantFuture","pastStates","currentState","futureStates","updater","onresize","handleSubmitPremises","rawInput","IconButton","disabled","Undo","Redo","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e65da4a.chunk.js","sourcesContent":["import {\n  ContradictionNode,\n  FinishedNode,\n  FormulaNode,\n  NodeGenerator,\n  OpenLeafNode,\n  TreeForm,\n  TreeNode,\n} from '../typings/TreeState'\nimport { isNonEmptyArray } from './util'\n\nexport const makeNode = ({\n  formulas = [],\n  forest = [],\n  id,\n}: Partial<FormulaNode> & {\n  id: string\n}): FormulaNode => {\n  return {\n    nodeType: 'formulas',\n    formulas,\n    forest,\n    id,\n  }\n}\n\nexport const makeContradictionNode = (parentId: string): ContradictionNode => ({\n  nodeType: 'contradiction',\n  formulas: [],\n  contradictoryRows: '',\n  id: `${parentId}0`,\n})\n\nexport const makeFinishedNode = (parentId: string): FinishedNode => ({\n  nodeType: 'finished',\n  formulas: [],\n  id: `${parentId}0`,\n})\n\n/**\n *\n * @param root The root of a subTree\n * @param createNodes function that creates new node objects\n */\nexport const destructivelyAppendChildren = (\n  root: TreeNode,\n  createNodes: NodeGenerator\n): void => {\n  if (root.nodeType === 'contradiction') {\n    return\n  } else if (root.nodeType === 'finished') {\n    // TODO: Special Handling for FinishedNodes?\n    console.warn(\"shouldn't try to append to finished branch\")\n    return\n  } else if (root.forest.length === 0) {\n    root.forest = createNodes(root.id)\n  } else {\n    root.forest.forEach((child) =>\n      destructivelyAppendChildren(child, createNodes)\n    )\n  }\n}\n\n/**\n *\n * @param formulas an array of of formulas.\n */\nexport const parsePremises = (formulas: string[]): FormulaNode => {\n  return makeNode({\n    formulas: formulas.map((form, idx) => makeTreeForm(form, idx + 1)),\n    forest: [],\n    id: '',\n  })\n}\n\nconst makeTreeForm = (value = '', row: number): TreeForm => ({\n  value,\n  resolved: false,\n  row,\n})\n\nexport const isOpenLeaf = (node: TreeNode | null): node is OpenLeafNode =>\n  node != null && node.nodeType === 'formulas' && node.forest.length === 0\n\nexport const lastRow = (node: FormulaNode) =>\n  firstRow(node) + node.formulas.length\n\nexport const firstRow = (node: FormulaNode) => node.formulas[0].row\n\nexport const makeEmptyFormulas = (n: number, nextRow: number): TreeForm[] => {\n  const arr = []\n  while (n-- > 0) {\n    arr.push(makeTreeForm('', nextRow++))\n  }\n  return arr\n}\n\nexport const convertIdToPath = (id: string): (0 | 1)[] =>\n  id.split('').map((char: string) => {\n    if (char === '0' || char === '1') {\n      return Number(char) as 0 | 1\n    } else {\n      throw new Error(`invalid character in node id: ${char} in ${id}`)\n    }\n  })\n\nexport const getNode = (root: FormulaNode, id: string): TreeNode => {\n  const nodePath: (0 | 1)[] = convertIdToPath(id)\n  let currentNode: TreeNode = root\n  for (const idx of nodePath) {\n    if (currentNode.nodeType !== 'formulas') {\n      throw new Error('Failed to get node path')\n    }\n    currentNode = currentNode.forest[idx]\n  }\n  return currentNode\n}\n\nexport const isNonLeafNode = (\n  node: TreeNode\n): node is FormulaNode & { forest: FormulaNode[] } =>\n  isFormulaNode(node) &&\n  isNonEmptyArray(node.forest) &&\n  node.forest[0]?.nodeType === 'formulas'\n\nexport const isFormulaNode = (node: TreeNode): node is FormulaNode =>\n  node.nodeType === 'formulas'\n","import {\n  Actions,\n  createActionCreators,\n  createReducerFunction,\n  ImmerReducer,\n} from 'immer-reducer'\nimport { Dispatch } from 'react'\n\nimport { CheckerFeedback } from './typings/Checker'\nimport {\n  FormulaNode,\n  Justification,\n  JustificationMap,\n} from './typings/TreeState'\nimport {\n  destructivelyAppendChildren,\n  getNode,\n  makeContradictionNode,\n  makeEmptyFormulas,\n  makeFinishedNode,\n  makeNode,\n  parsePremises,\n} from './util/nodes'\n\nexport type RudolfStore = {\n  tree: FormulaNode\n  nextRow: number\n  justifications: JustificationMap\n  feedback: CheckerFeedback\n  windowSize: string\n}\n\nexport class RudolfReducer extends ImmerReducer<RudolfStore> {\n  updateFormula(nodeId: string, formulaIndex: number, newValue: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    draftNode.formulas[formulaIndex].value = newValue\n  }\n\n  updateJustification(nodeRow: number, justification: Partial<Justification>) {\n    Object.assign(this.draftState.justifications[nodeRow], justification)\n  }\n\n  updateContradiction(id: string, contradictoryRows: string) {\n    Object.assign(getNode(this.draftState.tree, id), { contradictoryRows })\n  }\n\n  updateFeedback(feedback: CheckerFeedback) {\n    this.draftState.feedback = feedback\n  }\n\n  toggleResolved(nodeId: string, index: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    draftNode.formulas[index].resolved = !draftNode.formulas[index].resolved\n  }\n\n  createTree(premiseArray: string[]) {\n    this.draftState.tree = parsePremises(premiseArray)\n    this.draftState.nextRow = premiseArray.length + 1\n    this.draftState.justifications = { 1: { rule: '', parentRow: '' } }\n  }\n\n  continueBranch(nodeId: string, formulaCount: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    destructivelyAppendChildren(draftNode, (id) => [\n      makeNode({\n        id: `${id}0`,\n        formulas: makeEmptyFormulas(formulaCount, this.draftState.nextRow),\n      }),\n    ])\n\n    this.draftState.justifications[this.draftState.nextRow] = {\n      rule: '',\n      parentRow: '',\n    }\n    this.draftState.nextRow += formulaCount\n  }\n\n  splitBranch(nodeId: string, formulaCount: number) {\n    const draftNode = getNode(this.draftState.tree, nodeId)\n    destructivelyAppendChildren(draftNode, (id) => {\n      const formulas = makeEmptyFormulas(formulaCount, this.draftState.nextRow)\n      return [\n        makeNode({\n          id: `${id}0`,\n          formulas,\n        }),\n        makeNode({\n          id: `${id}1`,\n          formulas,\n        }),\n      ]\n    })\n    this.draftState.justifications[this.draftState.nextRow] = {\n      rule: '',\n      parentRow: '',\n    }\n    this.draftState.nextRow += formulaCount\n  }\n\n  markContradiction(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = [makeContradictionNode(draftNode.id)]\n  }\n\n  markFinished(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = [makeFinishedNode(nodeId)]\n  }\n\n  reopenBranch(nodeId: string) {\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\n    draftNode.forest = []\n  }\n\n  updateWindowSize() {\n    this.draftState.windowSize = `${window.innerHeight}x${window.innerWidth}`\n  }\n}\n\nexport const initialPremises = 'P->Q,P,~Q'\nconst premiseArray = initialPremises.split(',')\n\nexport const initialState: RudolfStore = {\n  tree: parsePremises(premiseArray),\n  nextRow: premiseArray.length + 1,\n  justifications: { 1: { rule: 'AS', parentRow: '' } },\n  feedback: { errorMessage: 'Nothing yet.' },\n  windowSize: `${window.innerHeight}x${window.innerWidth}`,\n}\n\nexport const rudolfReducer = createReducerFunction(RudolfReducer)\nexport const {\n  continueBranch,\n  createTree,\n  markContradiction,\n  markFinished,\n  reopenBranch,\n  splitBranch,\n  toggleResolved,\n  updateContradiction,\n  updateFeedback,\n  updateFormula,\n  updateJustification,\n  updateWindowSize,\n} = createActionCreators(RudolfReducer)\nexport type RudolfAction = Actions<typeof RudolfReducer>\nexport type CustomDispatch = Dispatch<RudolfAction>\n","import { createUseStyles } from 'react-jss'\n\nconst useJSS = createUseStyles({\n  Bounder: {\n    minWidth: '100%',\n    position: 'fixed',\n    bottom: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    zIndex: 10,\n  },\n\n  TextArea: {\n    overflow: 'hidden scroll',\n    fontSize: '16px',\n  },\n\n  Toggle: {\n    backgroundColor: 'black',\n    color: 'white',\n    fontSize: '13px',\n    alignSelf: 'flex-end',\n    '&:hover': {\n      cursor: 'pointer',\n    },\n    padding: '2px 10px',\n  },\n})\n\nexport default useJSS\n","import {\n  FeedbackMap,\n  FeedbackNode,\n  SequentNode,\n  FeedbackMessage,\n  CheckerFeedback,\n} from '../typings/Checker'\nimport { FormulaNode, JustificationMap, TreeForm } from '../typings/TreeState'\nimport { firstRow } from './nodes'\n\nexport const convertToSequent = (\n  { formulas: newFormulas, forest, id }: FormulaNode,\n  justifications: JustificationMap,\n  previousFormulas: TreeForm[] = []\n): SequentNode => {\n  const formulas = previousFormulas.concat(newFormulas)\n  if (forest.length === 0) {\n    return { label: convertFormulas(formulas), rule: '', forest: [], id }\n  } else {\n    const [child] = forest\n    if (child.nodeType === 'formulas') {\n      const justification = justifications[firstRow(child)]\n      const { rule } = justification\n      const parentRow = Number(justification.parentRow)\n      if (!validRow(parentRow)) {\n        throw new Error(\n          `Cited row must be a positive integer. Got \"${parentRow}\"`\n        )\n      }\n      if (parentRow >= firstRow(child)) {\n        throw new Error(\n          `Row cited (${parentRow}) must be less than current row (${firstRow(\n            child\n          )}).`\n        )\n      }\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        forest: [\n          {\n            label: rearrangeFormulas(formulas, parentRow),\n            rule,\n            id,\n            forest: forest.map((node) =>\n              convertToSequent(\n                node as FormulaNode,\n                justifications,\n                formulas.filter((form) => !(form.row === parentRow))\n              )\n            ),\n          },\n        ],\n      }\n    } else if (child.nodeType === 'contradiction') {\n      // We expect parentRow to be \"<number>,<number>\"\n      const [row1, row2] = child.contradictoryRows.split(',').map(Number)\n      if (![row1, row2].every(validRow)) {\n        throw new Error(\n          `Contradiction must cite 2 rows, separated by a comma. Got \"${child.contradictoryRows}\"`\n        )\n      }\n      const [form1, form2] = formulas\n        .filter((form) => [row1, row2].includes(form.row))\n        // this sort is a hack to avoid parsing for negation symbol, which may vary\n        .sort((a, b) => b.value.length - a.value.length)\n      if (!(form1 && form2)) {\n        throw new Error('Contradiction cites non-existent row')\n      }\n      const contradictionSequent: string = convertFormulas([\n        form1,\n        ...formulas.filter((form) => ![row1, row2].includes(form.row)),\n        form2,\n      ])\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        id,\n        forest: [\n          {\n            label: contradictionSequent,\n            rule: 'Ax',\n            id: child.id,\n            forest: [{ label: '', rule: '', forest: [] }],\n          },\n        ],\n      }\n    } else if (child.nodeType === 'finished') {\n      return {\n        label: convertFormulas(formulas),\n        rule: 'St',\n        id,\n        forest: [\n          {\n            label: convertFormulas(formulas),\n            rule: 'Lit',\n            id: child.id,\n            forest: [\n              {\n                label: '',\n                rule: '',\n                forest: [],\n              },\n            ],\n          },\n        ],\n      }\n    } else {\n      throw new Error('this was supposed to be exhaustive')\n    }\n  }\n}\n\nexport const processFeedback = (\n  sequentRoot: SequentNode,\n  feedbackRoot: FeedbackNode\n): FeedbackMap => {\n  const feedbackMap: FeedbackMap = {}\n  if (sequentRoot.forest.length) {\n    // close over (mutable) feedback map for recursive calls\n    const rec = (\n      sequent: SequentNode,\n      feedbackNode: FeedbackNode,\n      parentFeedback: FeedbackMessage\n    ): void => {\n      // detect dummy nodes inserted to pad tree\n      if (typeof sequent.id === 'string') {\n        if (sequent.rule === 'Ax' || sequent.rule === 'Lit') {\n          feedbackMap[sequent.id] = extractMessage(feedbackNode)\n          return\n        } else {\n          feedbackMap[sequent.id] = parentFeedback\n          sequent.forest.forEach((childSequent, idx) => {\n            rec(\n              childSequent,\n              feedbackNode.forest[idx],\n              extractMessage(feedbackNode)\n            )\n          })\n        }\n      } else {\n        sequent.forest.forEach((childSequent, idx) => {\n          rec(childSequent, feedbackNode.forest[idx], parentFeedback)\n        })\n      }\n    }\n    // recursive call\n    rec(sequentRoot, feedbackRoot, {\n      class: 'correct',\n      info: 'Assumptions',\n    })\n  }\n  return feedbackMap\n}\n\n// Promisifies the checker\nconst checkSequent = async (sequent: SequentNode): Promise<FeedbackNode> => {\n  return new Promise((resolve, reject) => {\n    try {\n      Carnap.checkIchikawaJenkinsSLTableau(sequent, (result: FeedbackNode) => {\n        resolve(result)\n      })\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\nexport const checkTree = async (\n  tree: any,\n  justifications: JustificationMap\n): Promise<CheckerFeedback> => {\n  const sequent = convertToSequent(tree, justifications)\n  const feedback: FeedbackNode = await checkSequent(sequent)\n  return { sequent, feedback: processFeedback(sequent, feedback) }\n}\n\nconst rearrangeFormulas = (\n  forms: TreeForm[],\n  mainFormulaRow: number\n): string => {\n  const idx = forms.findIndex((form) => form.row === mainFormulaRow)\n  const mainFormula = forms[idx]\n  const formulasWithoutMain = forms.slice(0, idx).concat(forms.slice(idx + 1))\n  const newList = [...formulasWithoutMain, mainFormula]\n  return convertFormulas(newList)\n}\n\nconst convertFormulas = (forms: TreeForm[]) =>\n  forms\n    .map(({ value }) => value)\n    .join(',')\n    .concat(':|-:')\n\nconst validRow = (maybeRow: number): boolean => maybeRow > 0\n\n// returns the non-recursive properties of the FeedbackNode\nconst extractMessage = ({\n  forest,\n  ...feedbackMessage\n}: FeedbackNode): FeedbackMessage => feedbackMessage\n","import { TextareaAutosize } from '@material-ui/core'\nimport React, { FC, useEffect, useState } from 'react'\n\nimport { CustomDispatch, RudolfStore, updateFeedback } from '../RudolfReducer'\nimport useJSS from './JSONView_styles'\nimport { checkTree } from '../util/carnapAdapter'\n\nexport const JSONView: FC<RudolfStore & { dispatch: CustomDispatch }> = ({\n  tree,\n  justifications,\n  feedback,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (window.Carnap) {\n      checkTree(tree, justifications)\n        .then(({ sequent, feedback }) => {\n          return dispatch(updateFeedback({ feedback, sequent }))\n        })\n        .catch(({ message }: Error) => {\n          return dispatch(updateFeedback({ errorMessage: message }))\n        })\n    }\n  }, [dispatch, justifications, tree])\n  const classes = useJSS()\n  const [open, setOpen] = useState(false)\n  return (\n    <div className={classes.Bounder}>\n      <div\n        className={classes.Toggle}\n        onClick={() => {\n          setOpen(!open)\n        }}\n      >\n        {open ? 'close' : 'open'}\n      </div>\n      <TextareaAutosize\n        className={classes.TextArea}\n        value={JSON.stringify({ tree, justifications, feedback })}\n        style={{\n          maxHeight: open ? '50vh' : '0vh',\n        }}\n      />\n    </div>\n  )\n}\n","import { Menu, MenuItem } from '@material-ui/core'\nimport React, { FC } from 'react'\n\nimport {\n  CustomDispatch,\n  toggleResolved,\n  continueBranch,\n  splitBranch,\n  markContradiction,\n  markFinished,\n  reopenBranch,\n} from '../RudolfReducer'\nimport { TreeNode } from '../typings/TreeState'\nimport { isOpenLeaf } from '../util/nodes'\n\ntype Props = {\n  onClose: () => void\n  open: boolean\n  index: number\n  node: TreeNode\n  anchorEl: Element\n  dispatch: CustomDispatch\n}\n\n/**\n * @TODO make context menu work for each of\n * - Formula Node:\n *   - branch commands\n *\n * - Contradiction/Finished node:\n *   - Reopen.\n * - Formula:\n *   - branch commands\n *   - (un)resolve\n *   - close branch.\n */\n\nexport const NodeMenu: FC<Props> = ({\n  open,\n  dispatch,\n  index,\n  anchorEl,\n  onClose: close,\n  node,\n}) => {\n  const formula = node.formulas[index]\n  return (\n    <Menu open={open} anchorEl={anchorEl} onClose={close}>\n      <MenuItem\n        onClick={() => {\n          dispatch(continueBranch(node.id, 1))\n          close()\n        }}\n      >\n        Continue Branch w/ 1 formula\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(splitBranch(node.id, 1))\n          close()\n        }}\n      >\n        Split Branch w/ 1 formula\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(continueBranch(node.id, 2))\n          close()\n        }}\n      >\n        Continue Branch w/ 2 formulas\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(splitBranch(node.id, 2))\n          close()\n        }}\n      >\n        Split Branch w/ 2 formulas\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          dispatch(toggleResolved(node.id, index))\n          close()\n        }}\n      >\n        Mark as {formula.resolved ? 'Un' : ''}Resolved\n      </MenuItem>\n      {isOpenLeaf(node) && (\n        <MenuItem\n          onClick={() => {\n            dispatch(markContradiction(node.id))\n            close()\n          }}\n        >\n          Close Branch With Contradiction\n        </MenuItem>\n      )}\n      {isOpenLeaf(node) && (\n        <MenuItem\n          onClick={() => {\n            dispatch(markFinished(node.id))\n            close()\n          }}\n        >\n          Mark Branch Finished\n        </MenuItem>\n      )}\n      {node.nodeType === 'contradiction' && (\n        <MenuItem\n          onClick={() => {\n            dispatch(reopenBranch(node.id))\n            close()\n          }}\n        >\n          Reopen Branch\n        </MenuItem>\n      )}\n    </Menu>\n  )\n}\n","import React, { FC, useState, useRef, Ref } from 'react'\nimport { Check } from '@material-ui/icons'\nimport { CustomDispatch, updateFormula } from '../RudolfReducer'\nimport { NodeMenu } from './NodeMenu'\nimport { FormulaNode } from '../typings/TreeState'\nimport AutosizeInput from 'react-input-autosize'\n\ninterface Props {\n  row: number\n  value: string\n  resolved: boolean\n  node: FormulaNode\n  index: number\n  dispatch: CustomDispatch\n}\n\nconst FormulaView: FC<Props> = ({ index, row, dispatch, node }) => {\n  const formula = node.formulas[index]\n  const { value, resolved } = formula\n  const [contextMenu, setContextMenu] = useState(false) // Convert to reducer action/field w/ ref, node, optional index.\n  const ref: Ref<HTMLDivElement> = useRef(null)\n  return (\n    <div\n      className=\"formula\"\n      ref={ref}\n      onContextMenu={(e) => {\n        e.preventDefault()\n        setContextMenu(true)\n      }}\n    >\n      <span>{row}</span>\n      <AutosizeInput\n        className=\"label\"\n        onChange={(event) =>\n          dispatch(updateFormula(node.id, index, event.currentTarget.value))\n        }\n        value={value}\n        placeholder=\"formula\"\n      />\n      <NodeMenu\n        open={contextMenu}\n        onClose={() => setContextMenu(false)}\n        dispatch={dispatch}\n        anchorEl={ref.current as HTMLDivElement}\n        index={index}\n        node={node}\n      />\n      {resolved ? <Check /> : ''}\n    </div>\n  )\n}\n\nexport default FormulaView\n","import React from 'react'\n\nconst Spacers = ({ diff }: { diff: number }) => {\n  const spacers: JSX.Element[] = []\n  const i = diff\n  while (spacers.length < i) {\n    spacers.push(<div className=\"spacer\" key={i} />)\n  }\n\n  return <div className={`spacers-${diff}`}>{spacers}</div>\n}\n\nexport default Spacers\n","/* eslint-disable react/jsx-no-undef */\nimport { Tooltip } from '@material-ui/core'\nimport React, { FC, Fragment } from 'react'\nimport AutoSizeInput from 'react-input-autosize'\nimport LineTo from 'react-lineto'\n\nimport {\n  CustomDispatch,\n  updateContradiction,\n  updateJustification,\n} from '../RudolfReducer'\nimport { FeedbackMap } from '../typings/Checker'\nimport { JustificationMap, TreeNode } from '../typings/TreeState'\nimport { firstRow, isFormulaNode, lastRow } from '../util/nodes'\nimport FormulaView from './FormulaView'\nimport Spacers from './Spacers'\n\ntype Props = {\n  node: TreeNode\n  dispatch: CustomDispatch\n  justifications: JustificationMap\n  feedbackMap?: FeedbackMap\n  windowSize: string\n}\n\nconst NodeView: FC<Props> = ({\n  node,\n  dispatch,\n  justifications,\n  feedbackMap,\n  windowSize,\n  ...props\n}) => {\n  let feedbackInfo, feedbackClass\n  if (feedbackMap) {\n    const feedback = feedbackMap[node.id] ?? ''\n    feedbackInfo = feedback.info\n    feedbackClass = feedback.class === 'correct' ? 'correct' : 'incorrect'\n  } else {\n    feedbackInfo = ''\n    feedbackClass = ''\n  }\n  if (isFormulaNode(node)) {\n    const { id, formulas, forest } = node\n\n    const spacers =\n      forest[0]?.nodeType === 'formulas' ? (\n        <Spacers diff={firstRow(forest[0]) - lastRow(node)} />\n      ) : undefined\n\n    const { rule, parentRow } = justifications[firstRow(node)]\n\n    return (\n      <div className={`node-container `}>\n        <Tooltip title={feedbackInfo} PopperProps={{ style: { fontSize: 16 } }}>\n          <div\n            className={`node node-id=${id} ${feedbackClass}`}\n            // TODO: allow context menu on nodes?\n            // onContextMenu={handleContextMenu}\n            {...props}\n          >\n            {formulas.map((form, index) => {\n              return (\n                <FormulaView\n                  key={`${form}-${index}`}\n                  node={node}\n                  index={index}\n                  dispatch={dispatch}\n                  {...form}\n                />\n              )\n            })}\n\n            {node.id !== '' ? (\n              <div className=\"justification\">\n                <AutoSizeInput\n                  className=\"rule\"\n                  onChange={({ currentTarget: { value: rule } }) =>\n                    dispatch(updateJustification(firstRow(node), { rule }))\n                  }\n                  value={rule}\n                  placeholder=\"rule\"\n                />\n                <AutoSizeInput\n                  className=\"row\"\n                  onChange={({ currentTarget: { value: parentRow } }) =>\n                    dispatch(updateJustification(firstRow(node), { parentRow }))\n                  }\n                  value={parentRow}\n                  placeholder=\"row\"\n                />\n              </div>\n            ) : (\n              'AS'\n            )}\n          </div>\n        </Tooltip>\n\n        <div className={`children ${forest.length > 1 ? 'split' : 'stack'}`}>\n          {forest.map((child) => {\n            return (\n              <Fragment key={child.id}>\n                {spacers}\n                <LineTo\n                  key={windowSize}\n                  from={`node-id=${id}`}\n                  to={`node-id=${child.id}`}\n                  borderColor=\"black\"\n                  fromAnchor=\"bottom\"\n                  toAnchor=\"top\"\n                  delay={0}\n                />\n                <NodeView\n                  {...{\n                    node: child,\n                    dispatch,\n                    justifications,\n                    feedbackMap,\n                    windowSize,\n                  }}\n                />\n              </Fragment>\n            )\n          })}\n        </div>\n      </div>\n    )\n  } else if (node.nodeType === 'contradiction') {\n    return (\n      <Tooltip title={feedbackInfo} PopperProps={{ style: { fontSize: 16 } }}>\n        <div\n          className={`closed-branch-marker node ${feedbackClass}`}\n          {...props}\n        >\n          X\n          <AutoSizeInput\n            className=\"rule\"\n            onChange={({ currentTarget: { value } }) =>\n              dispatch(updateContradiction(node.id, value))\n            }\n            value={node.contradictoryRows}\n            placeholder=\"rows\"\n          />\n        </div>\n      </Tooltip>\n    )\n  } else if (node.nodeType === 'finished') {\n    return (\n      <Tooltip title={feedbackInfo} PopperProps={{ style: { fontSize: 16 } }}>\n        <div className={`finished-branch-marker ${feedbackClass}`} {...props}>\n          O{' '}\n        </div>\n      </Tooltip>\n    )\n  } else {\n    throw new Error(\n      `Invariant violation: Invalid nodeType on node: ${JSON.stringify(node)}`\n    )\n  }\n}\n\nexport default NodeView\n","import React, { FormEventHandler } from 'react'\nimport AutosizeInput from 'react-input-autosize'\n\ntype Props = {\n  onSubmit: (premises: string) => void\n  premises: string\n  setPremises: (premises: string) => void\n}\n\nconst PremiseInput: React.FC<Props> = ({ onSubmit, premises, setPremises }) => {\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault()\n    onSubmit(premises)\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <AutosizeInput\n        type=\"text\"\n        name=\"premises\"\n        aria-label=\"Enter Premises\"\n        value={premises}\n        onChange={(event) => setPremises(event.target.value)}\n      />\n      <button className=\"submit-premises\" type=\"submit\">\n        Declare Premises\n      </button>\n    </form>\n  )\n}\n\nexport default PremiseInput\n","import React, { ChangeEventHandler } from 'react'\n\ntype Props = {\n  onChange: (premises: string) => void\n}\n\nconst examples = [\n  ['P->Q,P,~Q', 'Modus Ponens'],\n  ['~(~(P\\\\/Q)<->(~P/\\\\~Q))', \"De Morgen's Law\"],\n]\n\nconst PremisesSelector: React.FC<Props> = ({ onChange }) => {\n  const handleSelect: ChangeEventHandler<HTMLSelectElement> = (event) => {\n    const premises: string = event.currentTarget.value\n    onChange(premises)\n  }\n\n  return (\n    <select onChange={handleSelect}>\n      {examples.map(([value, name]) => (\n        <option value={value} key={value}>\n          {name}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default PremisesSelector\n","import { IconButton } from '@material-ui/core'\nimport { Redo, Undo } from '@material-ui/icons'\nimport React, { useEffect, useReducer, useState } from 'react'\n\nimport {\n  createTree,\n  initialPremises,\n  initialState,\n  rudolfReducer,\n  updateWindowSize,\n} from '../RudolfReducer'\nimport { makeUndoable } from '../undoableReducer'\nimport { JSONView } from './JSONView'\nimport NodeView from './NodeView'\nimport PremiseInput from './PremiseInput'\nimport PremisesSelector from './PremisesSelector'\n\nconst App: React.FC = (): JSX.Element => {\n  const [premises, setPremises] = useState(initialPremises)\n  const [[pastStates, currentState, futureStates], dispatch] = useReducer(\n    ...makeUndoable(rudolfReducer, initialState)\n  )\n  useEffect(() => {\n    const updater: typeof window.onresize = () => {\n      dispatch(updateWindowSize())\n    }\n    window.onresize = updater\n    return () => {\n      if ((window.onresize = updater)) {\n        window.onresize = null\n      }\n    }\n  }, [])\n\n  const handleSubmitPremises = (rawInput: string) => {\n    setPremises(rawInput)\n    const premiseArray = rawInput.split(',')\n    dispatch(createTree(premiseArray))\n  }\n\n  return (\n    <main className=\"App\">\n      <PremisesSelector onChange={handleSubmitPremises} />\n      <PremiseInput\n        premises={premises}\n        onSubmit={handleSubmitPremises}\n        setPremises={setPremises}\n      />\n      <span className=\"tree-buttons\">\n        <IconButton\n          className=\"undo-button\"\n          onClick={() => {\n            dispatch({ type: 'UNDO' })\n          }}\n          disabled={!pastStates.length}\n        >\n          <Undo />\n        </IconButton>\n        <IconButton\n          className=\"redo-button\"\n          onClick={() => {\n            dispatch({ type: 'REDO' })\n          }}\n          disabled={!futureStates.length}\n        >\n          <Redo />\n        </IconButton>\n      </span>\n      <NodeView\n        node={currentState.tree}\n        dispatch={dispatch}\n        justifications={currentState.justifications}\n        feedbackMap={currentState.feedback.feedback}\n        windowSize={currentState.windowSize}\n      />\n      <JSONView {...{ ...currentState, dispatch }} />\n    </main>\n  )\n}\n\nexport default App\n","import { Reducer } from 'react'\n\ntype TrackedChanges<S> = [S[], S, S[]]\n\nexport const makeUndoable = <S, A extends { type: string }>(\n  innerReducer: Reducer<S, A>,\n  initialState: S\n): [\n  Reducer<TrackedChanges<S>, A | { type: 'UNDO' } | { type: 'REDO' }>,\n  TrackedChanges<S>\n] => [\n  (\n    [past, present, future]: [S[], S, S[]],\n    action: A | { type: 'UNDO' } | { type: 'REDO' }\n  ) => {\n    switch (action.type) {\n      case 'UNDO':\n        const [previous, ...ancientHistory] = past\n        return [ancientHistory, previous, [present, ...future]]\n      case 'REDO':\n        const [next, ...distantFuture] = future\n        return [[present, ...past], next, distantFuture]\n      default:\n        return [[present, ...past], innerReducer(present, action as A), []]\n    }\n  },\n  [[], initialState, []],\n]\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport './styles/_main.scss'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}