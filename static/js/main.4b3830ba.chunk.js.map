{"version":3,"sources":["util/nodes.ts","RudolfReducer.ts","components/JSONView_styles.ts","util/carnapAdapter.ts","components/JSONView.tsx","components/NodeMenu.tsx","components/FormulaView.tsx","components/Spacers.tsx","components/NodeView.tsx","components/PremiseInput.tsx","components/PremisesSelector.tsx","components/App.tsx","undoableReducer.ts","serviceWorker.ts","index.tsx"],"names":["makeNode","formulas","forest","nodeType","id","destructivelyAppendChildren","root","createNodes","length","forEach","child","console","warn","parsePremises","map","form","idx","makeTreeForm","value","row","resolved","isOpenLeaf","node","lastRow","firstRow","makeEmptyFormulas","n","nextRow","arr","push","getNode","nodePath","split","char","Number","Error","convertIdToPath","currentNode","isFormulaNode","RudolfReducer","nodeId","formulaIndex","newValue","this","draftState","tree","nodeRow","justification","Object","assign","justifications","contradictoryRows","feedback","index","draftNode","premiseArray","1","rule","parentRow","formulaCount","parentId","ImmerReducer","initialState","errorMessage","rudolfReducer","createReducerFunction","createActionCreators","continueBranch","createTree","markContradiction","markFinished","reopenBranch","splitBranch","toggleResolved","updateContradiction","updateFeedback","updateFormula","updateJustification","useJSS","createUseStyles","Bounder","minWidth","position","bottom","display","flexDirection","zIndex","TextArea","overflow","fontSize","Toggle","backgroundColor","color","alignSelf","cursor","padding","convertToSequent","newFormulas","previousFormulas","concat","label","convertFormulas","validRow","rearrangeFormulas","filter","row1","row2","every","includes","sort","a","b","form1","form2","contradictionSequent","processFeedback","sequentRoot","feedbackRoot","feedbackMap","rec","sequent","feedbackNode","parentFeedback","extractMessage","childSequent","class","info","checkSequent","Promise","resolve","reject","Carnap","checkIchikawaJenkinsSLTableau","result","error","checkTree","forms","mainFormulaRow","findIndex","mainFormula","formulasWithoutMain","slice","newList","join","maybeRow","JSONView","dispatch","useEffect","window","then","catch","message","classes","useState","open","setOpen","className","onClick","TextareaAutosize","JSON","stringify","style","maxHeight","NodeMenu","anchorEl","close","onClose","formula","Menu","MenuItem","FormulaView","contextMenu","setContextMenu","ref","useRef","onContextMenu","e","preventDefault","onChange","event","currentTarget","placeholder","current","Check","Spacers","diff","spacers","i","key","NodeView","feedbackInfo","feedbackClass","props","undefined","Tooltip","title","PopperProps","relations","targetId","targetAnchor","sourceAnchor","PremiseInput","onSubmit","premises","setPremises","type","name","aria-label","target","examples","PremisesSelector","App","innerReducer","useReducer","action","past","present","future","previous","next","distantFuture","pastStates","currentState","futureStates","handleSubmitPremises","rawInput","IconButton","disabled","Undo","Redo","arrowLength","svgContainerStyle","strokeColor","noCurves","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b3830ba.chunk.js","sourcesContent":["import {\r\n  ContradictionNode,\r\n  FinishedNode,\r\n  FormulaNode,\r\n  NodeGenerator,\r\n  OpenLeafNode,\r\n  TreeForm,\r\n  TreeNode,\r\n} from '../typings/TreeState'\r\nimport { isNonEmptyArray } from './util'\r\n\r\nexport const makeNode = ({\r\n  formulas = [],\r\n  forest = [],\r\n  id,\r\n}: Partial<FormulaNode> & {\r\n  id: string\r\n}): FormulaNode => {\r\n  return {\r\n    nodeType: 'formulas',\r\n    formulas,\r\n    forest,\r\n    id,\r\n  }\r\n}\r\n\r\nexport const makeContradictionNode = (parentId: string): ContradictionNode => ({\r\n  nodeType: 'contradiction',\r\n  formulas: [],\r\n  contradictoryRows: '',\r\n  id: `${parentId}0`,\r\n})\r\n\r\nexport const makeFinishedNode = (parentId: string): FinishedNode => ({\r\n  nodeType: 'finished',\r\n  formulas: [],\r\n  id: `${parentId}0`,\r\n})\r\n\r\n/**\r\n *\r\n * @param root The root of a subTree\r\n * @param createNodes function that creates new node objects\r\n */\r\nexport const destructivelyAppendChildren = (\r\n  root: TreeNode,\r\n  createNodes: NodeGenerator\r\n): void => {\r\n  if (root.nodeType === 'contradiction') {\r\n    return\r\n  } else if (root.nodeType === 'finished') {\r\n    // TODO: Special Handling for FinishedNodes?\r\n    console.warn(\"shouldn't try to append to finished branch\")\r\n    return\r\n  } else if (root.forest.length === 0) {\r\n    root.forest = createNodes(root.id)\r\n  } else {\r\n    root.forest.forEach((child) =>\r\n      destructivelyAppendChildren(child, createNodes)\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param formulas an array of of formulas.\r\n */\r\nexport const parsePremises = (formulas: string[]): FormulaNode => {\r\n  return makeNode({\r\n    formulas: formulas.map((form, idx) => makeTreeForm(form, idx + 1)),\r\n    forest: [],\r\n    id: '',\r\n  })\r\n}\r\n\r\nconst makeTreeForm = (value = '', row: number): TreeForm => ({\r\n  value,\r\n  resolved: false,\r\n  row,\r\n})\r\n\r\nexport const isOpenLeaf = (node: TreeNode | null): node is OpenLeafNode =>\r\n  node != null && node.nodeType === 'formulas' && node.forest.length === 0\r\n\r\nexport const lastRow = (node: FormulaNode) =>\r\n  firstRow(node) + node.formulas.length\r\n\r\nexport const firstRow = (node: FormulaNode) => node.formulas[0].row\r\n\r\nexport const makeEmptyFormulas = (n: number, nextRow: number): TreeForm[] => {\r\n  const arr = []\r\n  while (n-- > 0) {\r\n    arr.push(makeTreeForm('', nextRow++))\r\n  }\r\n  return arr\r\n}\r\n\r\nexport const convertIdToPath = (id: string): (0 | 1)[] =>\r\n  id.split('').map((char: string) => {\r\n    if (char === '0' || char === '1') {\r\n      return Number(char) as 0 | 1\r\n    } else {\r\n      throw new Error(`invalid character in node id: ${char} in ${id}`)\r\n    }\r\n  })\r\n\r\nexport const getNode = (root: FormulaNode, id: string): TreeNode => {\r\n  const nodePath: (0 | 1)[] = convertIdToPath(id)\r\n  let currentNode: TreeNode = root\r\n  for (const idx of nodePath) {\r\n    if (currentNode.nodeType !== 'formulas') {\r\n      throw new Error('Failed to get node path')\r\n    }\r\n    currentNode = currentNode.forest[idx]\r\n  }\r\n  return currentNode\r\n}\r\n\r\nexport const isNonLeafNode = (\r\n  node: TreeNode\r\n): node is FormulaNode & { forest: FormulaNode[] } =>\r\n  isFormulaNode(node) &&\r\n  isNonEmptyArray(node.forest) &&\r\n  node.forest[0]?.nodeType === 'formulas'\r\n\r\nexport const isFormulaNode = (node: TreeNode): node is FormulaNode =>\r\n  node.nodeType === 'formulas'\r\n","import {\r\n  Actions,\r\n  createActionCreators,\r\n  createReducerFunction,\r\n  ImmerReducer,\r\n} from 'immer-reducer'\r\nimport { Dispatch } from 'react'\r\n\r\nimport { CheckerFeedback } from './typings/Checker'\r\nimport {\r\n  FormulaNode,\r\n  Justification,\r\n  JustificationMap,\r\n} from './typings/TreeState'\r\nimport {\r\n  destructivelyAppendChildren,\r\n  getNode,\r\n  makeContradictionNode,\r\n  makeEmptyFormulas,\r\n  makeFinishedNode,\r\n  makeNode,\r\n  parsePremises,\r\n} from './util/nodes'\r\n\r\nexport type RudolfStore = {\r\n  tree: FormulaNode\r\n  nextRow: number\r\n  justifications: JustificationMap\r\n  feedback: CheckerFeedback\r\n}\r\n\r\nexport class RudolfReducer extends ImmerReducer<RudolfStore> {\r\n  updateFormula(nodeId: string, formulaIndex: number, newValue: string) {\r\n    const draftNode = getNode(this.draftState.tree, nodeId)\r\n    draftNode.formulas[formulaIndex].value = newValue\r\n  }\r\n\r\n  updateJustification(nodeRow: number, justification: Partial<Justification>) {\r\n    Object.assign(this.draftState.justifications[nodeRow], justification)\r\n  }\r\n\r\n  updateContradiction(id: string, contradictoryRows: string) {\r\n    Object.assign(getNode(this.draftState.tree, id), { contradictoryRows })\r\n  }\r\n\r\n  updateFeedback(feedback: CheckerFeedback) {\r\n    this.draftState.feedback = feedback\r\n  }\r\n\r\n  toggleResolved(nodeId: string, index: number) {\r\n    const draftNode = getNode(this.draftState.tree, nodeId)\r\n    draftNode.formulas[index].resolved = !draftNode.formulas[index].resolved\r\n  }\r\n\r\n  createTree(premiseArray: string[]) {\r\n    this.draftState.tree = parsePremises(premiseArray)\r\n    this.draftState.nextRow = premiseArray.length + 1\r\n    this.draftState.justifications = { 1: { rule: '', parentRow: '' } }\r\n  }\r\n\r\n  continueBranch(nodeId: string, formulaCount: number) {\r\n    const draftNode = getNode(this.draftState.tree, nodeId)\r\n    destructivelyAppendChildren(draftNode, (id) => [\r\n      makeNode({\r\n        id: `${id}0`,\r\n        formulas: makeEmptyFormulas(formulaCount, this.draftState.nextRow),\r\n      }),\r\n    ])\r\n\r\n    this.draftState.justifications[this.draftState.nextRow] = {\r\n      rule: '',\r\n      parentRow: '',\r\n    }\r\n    this.draftState.nextRow += formulaCount\r\n  }\r\n\r\n  splitBranch(nodeId: string, formulaCount: number) {\r\n    const draftNode = getNode(this.draftState.tree, nodeId)\r\n    destructivelyAppendChildren(draftNode, (id) => {\r\n      const formulas = makeEmptyFormulas(formulaCount, this.draftState.nextRow)\r\n      return [\r\n        makeNode({\r\n          id: `${id}0`,\r\n          formulas,\r\n        }),\r\n        makeNode({\r\n          id: `${id}1`,\r\n          formulas,\r\n        }),\r\n      ]\r\n    })\r\n    this.draftState.justifications[this.draftState.nextRow] = {\r\n      rule: '',\r\n      parentRow: '',\r\n    }\r\n    this.draftState.nextRow += formulaCount\r\n  }\r\n\r\n  markContradiction(nodeId: string) {\r\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\r\n    draftNode.forest = [makeContradictionNode(draftNode.id)]\r\n  }\r\n\r\n  markFinished(nodeId: string) {\r\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\r\n    draftNode.forest = [makeFinishedNode(nodeId)]\r\n  }\r\n\r\n  reopenBranch(nodeId: string) {\r\n    const draftNode = getNode(this.draftState.tree, nodeId) as FormulaNode\r\n    draftNode.forest = []\r\n  }\r\n}\r\n\r\nexport const initialPremises = 'P->Q,P,~Q'\r\nconst premiseArray = initialPremises.split(',')\r\n\r\nexport const initialState: RudolfStore = {\r\n  tree: parsePremises(premiseArray),\r\n  nextRow: premiseArray.length + 1,\r\n  justifications: { 1: { rule: 'AS', parentRow: '' } },\r\n  feedback: { errorMessage: 'Nothing yet.' },\r\n}\r\n\r\nexport const rudolfReducer = createReducerFunction(RudolfReducer)\r\nexport const {\r\n  continueBranch,\r\n  createTree,\r\n  markContradiction,\r\n  markFinished,\r\n  reopenBranch,\r\n  splitBranch,\r\n  toggleResolved,\r\n  updateContradiction,\r\n  updateFeedback,\r\n  updateFormula,\r\n  updateJustification,\r\n} = createActionCreators(RudolfReducer)\r\nexport type RudolfAction = Actions<typeof RudolfReducer>\r\nexport type CustomDispatch = Dispatch<RudolfAction>\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useJSS = createUseStyles({\r\n  Bounder: {\r\n    minWidth: '100%',\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    zIndex: 10,\r\n  },\r\n\r\n  TextArea: {\r\n    overflow: 'hidden scroll',\r\n    fontSize: '16px',\r\n  },\r\n\r\n  Toggle: {\r\n    backgroundColor: 'black',\r\n    color: 'white',\r\n    fontSize: '13px',\r\n    alignSelf: 'flex-end',\r\n    '&:hover': {\r\n      cursor: 'pointer',\r\n    },\r\n    padding: '2px 10px',\r\n  },\r\n})\r\n\r\nexport default useJSS\r\n","import {\r\n  FeedbackMap,\r\n  FeedbackNode,\r\n  SequentNode,\r\n  FeedbackMessage,\r\n  CheckerFeedback,\r\n} from '../typings/Checker'\r\nimport { FormulaNode, JustificationMap, TreeForm } from '../typings/TreeState'\r\nimport { firstRow } from './nodes'\r\n\r\nexport const convertToSequent = (\r\n  { formulas: newFormulas, forest, id }: FormulaNode,\r\n  justifications: JustificationMap,\r\n  previousFormulas: TreeForm[] = []\r\n): SequentNode => {\r\n  const formulas = previousFormulas.concat(newFormulas)\r\n  if (forest.length === 0) {\r\n    return { label: convertFormulas(formulas), rule: '', forest: [], id }\r\n  } else {\r\n    const [child] = forest\r\n    if (child.nodeType === 'formulas') {\r\n      const justification = justifications[firstRow(child)]\r\n      const { rule } = justification\r\n      const parentRow = Number(justification.parentRow)\r\n      if (!validRow(parentRow)) {\r\n        throw new Error(\r\n          `Cited row must be a positive integer. Got \"${parentRow}\"`\r\n        )\r\n      }\r\n      if (parentRow >= firstRow(child)) {\r\n        throw new Error(\r\n          `Row cited (${parentRow}) must be less than current row (${firstRow(\r\n            child\r\n          )}).`\r\n        )\r\n      }\r\n      return {\r\n        label: convertFormulas(formulas),\r\n        rule: 'St',\r\n        forest: [\r\n          {\r\n            label: rearrangeFormulas(formulas, parentRow),\r\n            rule,\r\n            id,\r\n            forest: forest.map((node) =>\r\n              convertToSequent(\r\n                node as FormulaNode,\r\n                justifications,\r\n                formulas.filter((form) => !(form.row === parentRow))\r\n              )\r\n            ),\r\n          },\r\n        ],\r\n      }\r\n    } else if (child.nodeType === 'contradiction') {\r\n      // We expect parentRow to be \"<number>,<number>\"\r\n      const [row1, row2] = child.contradictoryRows.split(',').map(Number)\r\n      if (![row1, row2].every(validRow)) {\r\n        throw new Error(\r\n          `Contradiction must cite 2 rows, separated by a comma. Got \"${child.contradictoryRows}\"`\r\n        )\r\n      }\r\n      const [form1, form2] = formulas\r\n        .filter((form) => [row1, row2].includes(form.row))\r\n        // this sort is a hack to avoid parsing for negation symbol, which may vary\r\n        .sort((a, b) => b.value.length - a.value.length)\r\n      if (!(form1 && form2)) {\r\n        throw new Error('Contradiction cites non-existent row')\r\n      }\r\n      const contradictionSequent: string = convertFormulas([\r\n        form1,\r\n        ...formulas.filter((form) => ![row1, row2].includes(form.row)),\r\n        form2,\r\n      ])\r\n      return {\r\n        label: convertFormulas(formulas),\r\n        rule: 'St',\r\n        id,\r\n        forest: [\r\n          {\r\n            label: contradictionSequent,\r\n            rule: 'Ax',\r\n            id: child.id,\r\n            forest: [{ label: '', rule: '', forest: [] }],\r\n          },\r\n        ],\r\n      }\r\n    } else if (child.nodeType === 'finished') {\r\n      return {\r\n        label: convertFormulas(formulas),\r\n        rule: 'St',\r\n        id,\r\n        forest: [\r\n          {\r\n            label: convertFormulas(formulas),\r\n            rule: 'Lit',\r\n            id: child.id,\r\n            forest: [\r\n              {\r\n                label: '',\r\n                rule: '',\r\n                forest: [],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      }\r\n    } else {\r\n      throw new Error('this was supposed to be exhaustive')\r\n    }\r\n  }\r\n}\r\n\r\nexport const processFeedback = (\r\n  sequentRoot: SequentNode,\r\n  feedbackRoot: FeedbackNode\r\n): FeedbackMap => {\r\n  const feedbackMap: FeedbackMap = {}\r\n  if (sequentRoot.forest.length) {\r\n    // close over (mutable) feedback map for recursive calls\r\n    const rec = (\r\n      sequent: SequentNode,\r\n      feedbackNode: FeedbackNode,\r\n      parentFeedback: FeedbackMessage\r\n    ): void => {\r\n      // detect dummy nodes inserted to pad tree\r\n      if (typeof sequent.id === 'string') {\r\n        if (sequent.rule === 'Ax' || sequent.rule === 'Lit') {\r\n          feedbackMap[sequent.id] = extractMessage(feedbackNode)\r\n          return\r\n        } else {\r\n          feedbackMap[sequent.id] = parentFeedback\r\n          sequent.forest.forEach((childSequent, idx) => {\r\n            rec(\r\n              childSequent,\r\n              feedbackNode.forest[idx],\r\n              extractMessage(feedbackNode)\r\n            )\r\n          })\r\n        }\r\n      } else {\r\n        sequent.forest.forEach((childSequent, idx) => {\r\n          rec(childSequent, feedbackNode.forest[idx], parentFeedback)\r\n        })\r\n      }\r\n    }\r\n    // recursive call\r\n    rec(sequentRoot, feedbackRoot, {\r\n      class: 'correct',\r\n      info: 'Assumptions',\r\n    })\r\n  }\r\n  return feedbackMap\r\n}\r\n\r\n// Promisifies the checker\r\nconst checkSequent = async (sequent: SequentNode): Promise<FeedbackNode> => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      Carnap.checkIchikawaJenkinsSLTableau(sequent, (result: FeedbackNode) => {\r\n        resolve(result)\r\n      })\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  })\r\n}\r\n\r\nexport const checkTree = async (\r\n  tree: any,\r\n  justifications: JustificationMap\r\n): Promise<CheckerFeedback> => {\r\n  const sequent = convertToSequent(tree, justifications)\r\n  const feedback: FeedbackNode = await checkSequent(sequent)\r\n  return { sequent, feedback: processFeedback(sequent, feedback) }\r\n}\r\n\r\nconst rearrangeFormulas = (\r\n  forms: TreeForm[],\r\n  mainFormulaRow: number\r\n): string => {\r\n  const idx = forms.findIndex((form) => form.row === mainFormulaRow)\r\n  const mainFormula = forms[idx]\r\n  const formulasWithoutMain = forms.slice(0, idx).concat(forms.slice(idx + 1))\r\n  const newList = [...formulasWithoutMain, mainFormula]\r\n  return convertFormulas(newList)\r\n}\r\n\r\nconst convertFormulas = (forms: TreeForm[]) =>\r\n  forms\r\n    .map(({ value }) => value)\r\n    .join(',')\r\n    .concat(':|-:')\r\n\r\nconst validRow = (maybeRow: number): boolean => maybeRow > 0\r\n\r\n// returns the non-recursive properties of the FeedbackNode\r\nconst extractMessage = ({\r\n  forest,\r\n  ...feedbackMessage\r\n}: FeedbackNode): FeedbackMessage => feedbackMessage\r\n","import { TextareaAutosize } from '@material-ui/core'\r\nimport React, { FC, useEffect, useState } from 'react'\r\n\r\nimport { CustomDispatch, RudolfStore, updateFeedback } from '../RudolfReducer'\r\nimport useJSS from './JSONView_styles'\r\nimport { checkTree } from '../util/carnapAdapter'\r\n\r\nexport const JSONView: FC<RudolfStore & { dispatch: CustomDispatch }> = ({\r\n  tree,\r\n  justifications,\r\n  feedback,\r\n  dispatch,\r\n}) => {\r\n  useEffect(() => {\r\n    if (window.Carnap) {\r\n      checkTree(tree, justifications)\r\n        .then(({ sequent, feedback }) => {\r\n          return dispatch(updateFeedback({ feedback, sequent }))\r\n        })\r\n        .catch(({ message }: Error) => {\r\n          return dispatch(updateFeedback({ errorMessage: message }))\r\n        })\r\n    }\r\n  }, [dispatch, justifications, tree])\r\n  const classes = useJSS()\r\n  const [open, setOpen] = useState(false)\r\n  return (\r\n    <div className={classes.Bounder}>\r\n      <div\r\n        className={classes.Toggle}\r\n        onClick={() => {\r\n          setOpen(!open)\r\n        }}\r\n      >\r\n        {open ? 'close' : 'open'}\r\n      </div>\r\n      <TextareaAutosize\r\n        className={classes.TextArea}\r\n        value={JSON.stringify({ tree, justifications, feedback })}\r\n        style={{\r\n          maxHeight: open ? '50vh' : '0vh',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { Menu, MenuItem } from '@material-ui/core'\r\nimport React, { FC } from 'react'\r\n\r\nimport {\r\n  CustomDispatch,\r\n  toggleResolved,\r\n  continueBranch,\r\n  splitBranch,\r\n  markContradiction,\r\n  markFinished,\r\n  reopenBranch,\r\n} from '../RudolfReducer'\r\nimport { TreeNode } from '../typings/TreeState'\r\nimport { isOpenLeaf } from '../util/nodes'\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  open: boolean\r\n  index: number\r\n  node: TreeNode\r\n  anchorEl: Element\r\n  dispatch: CustomDispatch\r\n}\r\n\r\n/**\r\n * @TODO make context menu work for each of\r\n * - Formula Node:\r\n *   - branch commands\r\n *\r\n * - Contradiction/Finished node:\r\n *   - Reopen.\r\n * - Formula:\r\n *   - branch commands\r\n *   - (un)resolve\r\n *   - close branch.\r\n */\r\n\r\nexport const NodeMenu: FC<Props> = ({\r\n  open,\r\n  dispatch,\r\n  index,\r\n  anchorEl,\r\n  onClose: close,\r\n  node,\r\n}) => {\r\n  const formula = node.formulas[index]\r\n  return (\r\n    <Menu open={open} anchorEl={anchorEl} onClose={close}>\r\n      <MenuItem\r\n        onClick={() => {\r\n          dispatch(continueBranch(node.id, 1))\r\n          close()\r\n        }}\r\n      >\r\n        Continue Branch w/ 1 formula\r\n      </MenuItem>\r\n      <MenuItem\r\n        onClick={() => {\r\n          dispatch(splitBranch(node.id, 1))\r\n          close()\r\n        }}\r\n      >\r\n        Split Branch w/ 1 formula\r\n      </MenuItem>\r\n      <MenuItem\r\n        onClick={() => {\r\n          dispatch(continueBranch(node.id, 2))\r\n          close()\r\n        }}\r\n      >\r\n        Continue Branch w/ 2 formulas\r\n      </MenuItem>\r\n      <MenuItem\r\n        onClick={() => {\r\n          dispatch(splitBranch(node.id, 2))\r\n          close()\r\n        }}\r\n      >\r\n        Split Branch w/ 2 formulas\r\n      </MenuItem>\r\n      <MenuItem\r\n        onClick={() => {\r\n          dispatch(toggleResolved(node.id, index))\r\n          close()\r\n        }}\r\n      >\r\n        Mark as {formula.resolved ? 'Un' : ''}Resolved\r\n      </MenuItem>\r\n      {isOpenLeaf(node) && (\r\n        <MenuItem\r\n          onClick={() => {\r\n            dispatch(markContradiction(node.id))\r\n            close()\r\n          }}\r\n        >\r\n          Close Branch With Contradiction\r\n        </MenuItem>\r\n      )}\r\n      {isOpenLeaf(node) && (\r\n        <MenuItem\r\n          onClick={() => {\r\n            dispatch(markFinished(node.id))\r\n            close()\r\n          }}\r\n        >\r\n          Mark Branch Finished\r\n        </MenuItem>\r\n      )}\r\n      {node.nodeType === 'contradiction' && (\r\n        <MenuItem\r\n          onClick={() => {\r\n            dispatch(reopenBranch(node.id))\r\n            close()\r\n          }}\r\n        >\r\n          Reopen Branch\r\n        </MenuItem>\r\n      )}\r\n    </Menu>\r\n  )\r\n}\r\n","import React, { FC, useState, useRef, Ref } from 'react'\r\nimport { Check } from '@material-ui/icons'\r\nimport { CustomDispatch, updateFormula } from '../RudolfReducer'\r\nimport { NodeMenu } from './NodeMenu'\r\nimport { FormulaNode } from '../typings/TreeState'\r\nimport AutosizeInput from 'react-input-autosize'\r\n\r\ninterface Props {\r\n  row: number\r\n  value: string\r\n  resolved: boolean\r\n  node: FormulaNode\r\n  index: number\r\n  dispatch: CustomDispatch\r\n}\r\n\r\nconst FormulaView: FC<Props> = ({ index, row, dispatch, node }) => {\r\n  const formula = node.formulas[index]\r\n  const { value, resolved } = formula\r\n  const [contextMenu, setContextMenu] = useState(false) // Convert to reducer action/field w/ ref, node, optional index.\r\n  const ref: Ref<HTMLDivElement> = useRef(null)\r\n  return (\r\n    <div\r\n      className=\"formula\"\r\n      ref={ref}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault()\r\n        setContextMenu(true)\r\n      }}\r\n    >\r\n      <span>{row}</span>\r\n      <AutosizeInput\r\n        className=\"label\"\r\n        onChange={(event) =>\r\n          dispatch(updateFormula(node.id, index, event.currentTarget.value))\r\n        }\r\n        value={value}\r\n        placeholder=\"formula\"\r\n      />\r\n      <NodeMenu\r\n        open={contextMenu}\r\n        onClose={() => setContextMenu(false)}\r\n        dispatch={dispatch}\r\n        anchorEl={ref.current as HTMLDivElement}\r\n        index={index}\r\n        node={node}\r\n      />\r\n      {resolved ? <Check /> : ''}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormulaView\r\n","import React from 'react'\r\n\r\nconst Spacers = ({ diff }: { diff: number }) => {\r\n  const spacers: JSX.Element[] = []\r\n  const i = diff\r\n  while (spacers.length < i) {\r\n    spacers.push(<div className=\"spacer\" key={i} />)\r\n  }\r\n\r\n  return <div className={`spacers-${diff}`}>{spacers}</div>\r\n}\r\n\r\nexport default Spacers\r\n","/* eslint-disable react/jsx-no-undef */\r\nimport { Tooltip } from '@material-ui/core'\r\nimport React, { FC, Fragment } from 'react'\r\nimport AutoSizeInput from 'react-input-autosize'\r\nimport { ArcherElement } from 'react-archer'\r\n\r\nimport {\r\n  CustomDispatch,\r\n  updateContradiction,\r\n  updateJustification,\r\n} from '../RudolfReducer'\r\nimport { FeedbackMap } from '../typings/Checker'\r\nimport { JustificationMap, TreeNode } from '../typings/TreeState'\r\nimport { firstRow, isFormulaNode, lastRow } from '../util/nodes'\r\nimport FormulaView from './FormulaView'\r\nimport Spacers from './Spacers'\r\n\r\ntype Props = {\r\n  node: TreeNode\r\n  dispatch: CustomDispatch\r\n  justifications: JustificationMap\r\n  feedbackMap?: FeedbackMap\r\n}\r\n\r\nconst NodeView: FC<Props> = ({\r\n  node,\r\n  dispatch,\r\n  justifications,\r\n  feedbackMap,\r\n  ...props\r\n}) => {\r\n  let feedbackInfo, feedbackClass\r\n  if (feedbackMap) {\r\n    const feedback = feedbackMap[node.id] ?? ''\r\n    feedbackInfo = feedback.info\r\n    feedbackClass = feedback.class === 'correct' ? 'correct' : 'incorrect'\r\n  } else {\r\n    feedbackInfo = ''\r\n    feedbackClass = ''\r\n  }\r\n  if (isFormulaNode(node)) {\r\n    const { id, formulas, forest } = node\r\n\r\n    const spacers =\r\n      forest[0]?.nodeType === 'formulas' ? (\r\n        <Spacers diff={firstRow(forest[0]) - lastRow(node)} />\r\n      ) : undefined\r\n\r\n    const { rule, parentRow } = justifications[firstRow(node)]\r\n\r\n    return (\r\n      <div className={`node-container `}>\r\n        <Tooltip title={feedbackInfo} PopperProps={{ style: { fontSize: 16 } }}>\r\n          <ArcherElement\r\n            id={id}\r\n            relations={forest.map((child) => {\r\n              return {\r\n                targetId: child.id,\r\n                targetAnchor: 'top',\r\n                sourceAnchor: 'bottom',\r\n              }\r\n            })}\r\n          >\r\n            <div\r\n              className={`node node-id=${id} ${feedbackClass}`}\r\n              // TODO: allow context menu on nodes?\r\n              // onContextMenu={handleContextMenu}\r\n              {...props}\r\n            >\r\n              {formulas.map((form, index) => {\r\n                return (\r\n                  <FormulaView\r\n                    key={`${form}-${index}`}\r\n                    node={node}\r\n                    index={index}\r\n                    dispatch={dispatch}\r\n                    {...form}\r\n                  />\r\n                )\r\n              })}\r\n\r\n              {node.id !== '' ? (\r\n                <div className=\"justification\">\r\n                  <AutoSizeInput\r\n                    className=\"rule\"\r\n                    onChange={({ currentTarget: { value: rule } }) =>\r\n                      dispatch(updateJustification(firstRow(node), { rule }))\r\n                    }\r\n                    value={rule}\r\n                    placeholder=\"rule\"\r\n                  />\r\n                  <AutoSizeInput\r\n                    className=\"row\"\r\n                    onChange={({ currentTarget: { value: parentRow } }) =>\r\n                      dispatch(\r\n                        updateJustification(firstRow(node), { parentRow })\r\n                      )\r\n                    }\r\n                    value={parentRow}\r\n                    placeholder=\"row\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                'AS'\r\n              )}\r\n            </div>\r\n          </ArcherElement>\r\n        </Tooltip>\r\n\r\n        <div className={`children ${forest.length > 1 ? 'split' : 'stack'}`}>\r\n          {forest.map((child) => {\r\n            return (\r\n              <Fragment key={child.id}>\r\n                {spacers}\r\n                <NodeView\r\n                  {...{\r\n                    node: child,\r\n                    dispatch,\r\n                    justifications,\r\n                    feedbackMap,\r\n                  }}\r\n                />\r\n              </Fragment>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  } else if (node.nodeType === 'contradiction') {\r\n    return (\r\n      <Tooltip title={feedbackInfo} PopperProps={{ style: { fontSize: 16 } }}>\r\n        <div\r\n          className={`closed-branch-marker node ${feedbackClass}`}\r\n          {...props}\r\n        >\r\n          X\r\n          <AutoSizeInput\r\n            className=\"rule\"\r\n            onChange={({ currentTarget: { value } }) =>\r\n              dispatch(updateContradiction(node.id, value))\r\n            }\r\n            value={node.contradictoryRows}\r\n            placeholder=\"rows\"\r\n          />\r\n        </div>\r\n      </Tooltip>\r\n    )\r\n  } else if (node.nodeType === 'finished') {\r\n    return (\r\n      <Tooltip title={feedbackInfo} PopperProps={{ style: { fontSize: 16 } }}>\r\n        <div className={`finished-branch-marker ${feedbackClass}`} {...props}>\r\n          O{' '}\r\n        </div>\r\n      </Tooltip>\r\n    )\r\n  } else {\r\n    throw new Error(\r\n      `Invariant violation: Invalid nodeType on node: ${JSON.stringify(node)}`\r\n    )\r\n  }\r\n}\r\n\r\nexport default NodeView\r\n","import React, { FormEventHandler } from 'react'\r\nimport AutosizeInput from 'react-input-autosize'\r\n\r\ntype Props = {\r\n  onSubmit: (premises: string) => void\r\n  premises: string\r\n  setPremises: (premises: string) => void\r\n}\r\n\r\nconst PremiseInput: React.FC<Props> = ({ onSubmit, premises, setPremises }) => {\r\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\r\n    event.preventDefault()\r\n    onSubmit(premises)\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <AutosizeInput\r\n        type=\"text\"\r\n        name=\"premises\"\r\n        aria-label=\"Enter Premises\"\r\n        value={premises}\r\n        onChange={(event) => setPremises(event.target.value)}\r\n      />\r\n      <button className=\"submit-premises\" type=\"submit\">\r\n        Declare Premises\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PremiseInput\r\n","import React, { ChangeEventHandler } from 'react'\r\n\r\ntype Props = {\r\n  onChange: (premises: string) => void\r\n}\r\n\r\nconst examples = [\r\n  ['P->Q,P,~Q', 'Modus Ponens'],\r\n  ['~(~(P\\\\/Q)<->(~P/\\\\~Q))', \"De Morgen's Law\"],\r\n]\r\n\r\nconst PremisesSelector: React.FC<Props> = ({ onChange }) => {\r\n  const handleSelect: ChangeEventHandler<HTMLSelectElement> = (event) => {\r\n    const premises: string = event.currentTarget.value\r\n    onChange(premises)\r\n  }\r\n\r\n  return (\r\n    <select onChange={handleSelect}>\r\n      {examples.map(([value, name]) => (\r\n        <option value={value} key={value}>\r\n          {name}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default PremisesSelector\r\n","import { IconButton } from '@material-ui/core'\r\nimport { Redo, Undo } from '@material-ui/icons'\r\nimport React, { useReducer, useState } from 'react'\r\n\r\nimport {\r\n  createTree,\r\n  initialPremises,\r\n  initialState,\r\n  rudolfReducer,\r\n} from '../RudolfReducer'\r\nimport { makeUndoable } from '../undoableReducer'\r\nimport { JSONView } from './JSONView'\r\nimport NodeView from './NodeView'\r\nimport PremiseInput from './PremiseInput'\r\nimport PremisesSelector from './PremisesSelector'\r\nimport { ArcherContainer } from 'react-archer'\r\n\r\nconst App: React.FC = (): JSX.Element => {\r\n  const [premises, setPremises] = useState(initialPremises)\r\n  const [[pastStates, currentState, futureStates], dispatch] = useReducer(\r\n    ...makeUndoable(rudolfReducer, initialState)\r\n  )\r\n\r\n  const handleSubmitPremises = (rawInput: string) => {\r\n    setPremises(rawInput)\r\n    const premiseArray = rawInput.split(',')\r\n    dispatch(createTree(premiseArray))\r\n  }\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <PremisesSelector onChange={handleSubmitPremises} />\r\n      <PremiseInput\r\n        premises={premises}\r\n        onSubmit={handleSubmitPremises}\r\n        setPremises={setPremises}\r\n      />\r\n      <span className=\"tree-buttons\">\r\n        <IconButton\r\n          className=\"undo-button\"\r\n          onClick={() => {\r\n            dispatch({ type: 'UNDO' })\r\n          }}\r\n          disabled={!pastStates.length}\r\n        >\r\n          <Undo />\r\n        </IconButton>\r\n        <IconButton\r\n          className=\"redo-button\"\r\n          onClick={() => {\r\n            dispatch({ type: 'REDO' })\r\n          }}\r\n          disabled={!futureStates.length}\r\n        >\r\n          <Redo />\r\n        </IconButton>\r\n      </span>\r\n      <ArcherContainer\r\n        arrowLength={0}\r\n        style={{ zIndex: 1 }}\r\n        svgContainerStyle={{ zIndex: -1 }}\r\n        strokeColor=\"black\"\r\n        noCurves={false}\r\n      >\r\n        <NodeView\r\n          node={currentState.tree}\r\n          dispatch={dispatch}\r\n          justifications={currentState.justifications}\r\n          feedbackMap={currentState.feedback.feedback}\r\n        />\r\n      </ArcherContainer>\r\n      <JSONView {...{ ...currentState, dispatch }} />\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { Reducer } from 'react'\r\n\r\ntype TrackedChanges<S> = [S[], S, S[]]\r\n\r\nexport const makeUndoable = <S, A extends { type: string }>(\r\n  innerReducer: Reducer<S, A>,\r\n  initialState: S\r\n): [\r\n  Reducer<TrackedChanges<S>, A | { type: 'UNDO' } | { type: 'REDO' }>,\r\n  TrackedChanges<S>\r\n] => [\r\n  (\r\n    [past, present, future]: [S[], S, S[]],\r\n    action: A | { type: 'UNDO' } | { type: 'REDO' }\r\n  ) => {\r\n    switch (action.type) {\r\n      case 'UNDO':\r\n        const [previous, ...ancientHistory] = past\r\n        return [ancientHistory, previous, [present, ...future]]\r\n      case 'REDO':\r\n        const [next, ...distantFuture] = future\r\n        return [[present, ...past], next, distantFuture]\r\n      default:\r\n        return [[present, ...past], innerReducer(present, action as A), []]\r\n    }\r\n  },\r\n  [[], initialState, []],\r\n]\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './styles/_main.scss'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}